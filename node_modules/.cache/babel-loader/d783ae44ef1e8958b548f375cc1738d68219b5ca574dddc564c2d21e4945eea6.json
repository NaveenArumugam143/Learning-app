{"ast":null,"code":"import React, { createContext, useContext, useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\nvar Observable = function () {\n  function Observable() {\n    classCallCheck(this, Observable);\n    this.observers = [];\n  }\n  createClass(Observable, [{\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      this.observers.push(fn);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(fn) {\n      if (fn) {\n        this.observers = this.observers.filter(function (item) {\n          if (item !== fn) {\n            return item;\n          }\n          return null;\n        });\n      } else {\n        this.observers = [];\n      }\n    }\n  }, {\n    key: \"next\",\n    value: function next(o, thisObj) {\n      var scope = thisObj || window;\n      this.observers.forEach(function (item) {\n        item.call(scope, o);\n      });\n    }\n  }]);\n  return Observable;\n}();\nvar FormControlContext = createContext(null);\n\n/** Converts a promise into Observable\n * @param {Promise} r\n * @param {(value: any) => any} cb\n * @returns {Observable}\n */\nfunction fromPromise(r, cb) {\n  var observable = new Observable();\n  r.then(function (value) {\n    var mappedValue = function mappedValue(value) {\n      return cb ? cb(value) : value;\n    };\n    observable.next(mappedValue(value));\n  }, function (error) {\n    observable.next(error);\n  }).then(null, function (error) {\n    throw error;\n  });\n  return observable;\n}\n/**\n * Checks if an object is a Promise\n * @param {Observable} obj\n * @returns {boolean}\n */\nfunction isPromise(obj) {\n  return !!obj && typeof obj.then === 'function';\n}\n/**\n * Checks if an object is a Function\n * @param {any} obj\n * @returns {boolean}\n */\nfunction isFunction(obj) {\n  return 'function' === typeof obj;\n}\n/**\n * Checks if an object is Observable\n * @param {Observable} obj\n * @returns {boolean}\n */\nfunction isObservable(obj) {\n  return !!obj && typeof obj.subscribe === 'function';\n}\n/**\n * Converts an object into Observable\n * @param {any} r\n * @returns {Observable}\n */\nfunction toObservable(r) {\n  var obs = isPromise(r) ? fromPromise(r) : r;\n  if (!isObservable(obs)) {\n    throw new Error('Expected validator to return Promise or Observable.');\n  }\n  return obs;\n}\nvar isReactNative = function isReactNative() {\n  return typeof window !== 'undefined' && window.navigator && window.navigator.product && window.navigator.product === 'ReactNative';\n};\nvar isEvent = function isEvent(candidate) {\n  return !!(candidate && candidate.stopPropagation && candidate.preventDefault);\n};\nvar controlsToBeMap = {\n  ReactNative: {\n    switch: {\n      value: 'value',\n      onValueChange: 'onChange',\n      onBlur: 'onBlur',\n      onFocus: 'onFocus',\n      disabled: 'disabled'\n    },\n    default: {\n      value: 'value',\n      onChange: 'onChange',\n      onBlur: 'onBlur',\n      onFocus: 'onFocus',\n      editable: 'enabled'\n    }\n  },\n  default: {\n    value: 'value',\n    onChange: 'onChange',\n    onBlur: 'onBlur',\n    onFocus: 'onFocus',\n    disabled: 'disabled'\n  }\n};\nvar getAbsoluteValue = function getAbsoluteValue(value) {\n  return value === undefined || value === null ? '' : value;\n};\nvar getInputControls = function getInputControls(inputType) {\n  return isReactNative() ? controlsToBeMap.ReactNative[inputType] || controlsToBeMap.ReactNative.default : controlsToBeMap.default;\n};\nfunction getHandler(inputType, value, control) {\n  var controlObject = {};\n  var inputControls = getInputControls(inputType);\n  Object.keys(inputControls).forEach(function (key) {\n    var controlProperty = null;\n    if (key === 'value') {\n      if (control.updateOn !== 'change') {\n        controlProperty = getAbsoluteValue(control._pendingValue);\n      } else {\n        controlProperty = getAbsoluteValue(control.value);\n      }\n    } else {\n      controlProperty = control[inputControls[key]];\n    }\n    controlObject[key] = controlProperty;\n  });\n  var mappedObject = controlObject;\n  switch (inputType) {\n    case 'checkbox':\n      mappedObject['checked'] = !!mappedObject.value;\n      mappedObject['type'] = inputType;\n      break;\n    case 'radio':\n      mappedObject['checked'] = mappedObject.value === value;\n      mappedObject.value = value;\n      mappedObject['type'] = inputType;\n      break;\n    default:\n  }\n  return mappedObject;\n}\n/**\n * Display warning messages\n * @param {condition} any\n * @param {message} string\n * @returns {void}\n */\nfunction warning(condition, message) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!condition) {\n      console.error('Warning: ' + message);\n    }\n  }\n}\n/**\n * Generates the unique key for react elements\n * @param {*} pre\n */\nvar generateKey = function generateKey(pre) {\n  return pre + '_' + new Date().getTime();\n};\nvar FIELD_PROPS = ['strict', 'render', 'name', 'index', 'control', 'formState', 'options', 'parent', 'meta'];\nvar mapConfigToFieldProps = function mapConfigToFieldProps(config) {\n  var props = {};\n  if (config) {\n    Object.keys(config).forEach(function (configKey) {\n      if (FIELD_PROPS.indexOf(configKey) > -1) {\n        props[configKey] = config[configKey];\n      }\n    });\n  }\n  return props;\n};\nfunction isEmptyInputValue(value) {\n  return value == null || value.length === 0;\n}\nfunction isPresent(o) {\n  return o != null;\n}\nfunction _mergeErrors(arrayOfErrors) {\n  var res = arrayOfErrors.reduce(function (res, errors) {\n    return errors != null ? Object.assign({}, res, errors) : res;\n  }, {});\n  return Object.keys(res).length === 0 ? null : res;\n}\nfunction _executeValidators(control, validators) {\n  return validators.map(function (v) {\n    return v(control);\n  });\n}\nfunction _executeAsyncValidators(control, validators) {\n  return validators.map(function (v) {\n    return v(control);\n  });\n}\nvar EMAIL_REGEXP = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\nvar Validators = function () {\n  function Validators() {\n    classCallCheck(this, Validators);\n  }\n  createClass(Validators, null, [{\n    key: 'min',\n    /**\n     * Validator that requires controls to have a value greater than a number.\n     */\n    value: function min(_min) {\n      return function (control) {\n        if (isEmptyInputValue(control.value) || isEmptyInputValue(_min)) {\n          return null; // don't validate empty values to allow optional controls\n        }\n\n        var parsedValue = parseFloat(control.value);\n        return !isNaN(parsedValue) && parsedValue < _min ? {\n          min: {\n            min: _min,\n            actual: parsedValue\n          }\n        } : null;\n      };\n    }\n\n    /**\n     * Validator that requires controls to have a value less than a number.\n     */\n  }, {\n    key: 'max',\n    value: function max(_max) {\n      return function (control) {\n        if (isEmptyInputValue(control.value) || isEmptyInputValue(_max)) {\n          return null; // don't validate empty values to allow optional controls\n        }\n\n        var parsedValue = parseFloat(control.value);\n        return !isNaN(parsedValue) && parsedValue > _max ? {\n          max: {\n            max: _max,\n            actual: parsedValue\n          }\n        } : null;\n      };\n    }\n\n    /**\n     * Validator that requires controls to have a non-empty value.\n     */\n  }, {\n    key: 'required',\n    value: function required(control) {\n      return isEmptyInputValue(control.value) ? {\n        required: true\n      } : null;\n    }\n\n    /**\n     * Validator that requires control value to be true.\n     */\n  }, {\n    key: 'requiredTrue',\n    value: function requiredTrue(control) {\n      return control.value === true ? null : {\n        required: true\n      };\n    }\n\n    /**\n     * Validator that performs email validation.\n     */\n  }, {\n    key: 'email',\n    value: function email(control) {\n      if (isEmptyInputValue(control.value)) {\n        return null;\n      }\n      return EMAIL_REGEXP.test(control.value) ? null : {\n        email: true\n      };\n    }\n\n    /**\n     * Validator that requires controls to have a value of a minimum length.\n     */\n  }, {\n    key: 'minLength',\n    value: function minLength(_minLength) {\n      return function (control) {\n        if (isEmptyInputValue(control.value)) {\n          return null; // don't validate empty values to allow optional controls\n        }\n\n        var length = control.value ? control.value.length : 0;\n        return length < _minLength ? {\n          minLength: {\n            requiredLength: _minLength,\n            actualLength: length\n          }\n        } : null;\n      };\n    }\n\n    /**\n     * Validator that requires controls to have a value of a maximum length.\n     */\n  }, {\n    key: 'maxLength',\n    value: function maxLength(_maxLength) {\n      return function (control) {\n        var length = control.value ? control.value.length : 0;\n        return length > _maxLength ? {\n          maxLength: {\n            requiredLength: _maxLength,\n            actualLength: length\n          }\n        } : null;\n      };\n    }\n    /**\n     * Validator that requires a control to match a regex to its value.\n     */\n  }, {\n    key: 'pattern',\n    value: function pattern(_pattern) {\n      if (!_pattern) return null;\n      var regex = void 0;\n      var regexStr = void 0;\n      if (typeof _pattern === 'string') {\n        regexStr = '^' + _pattern + '$';\n        regex = new RegExp(regexStr);\n      } else {\n        regexStr = _pattern.toString();\n        regex = _pattern;\n      }\n      return function (control) {\n        if (isEmptyInputValue(control.value)) {\n          return null; // don't validate empty values to allow optional controls\n        }\n\n        return regex.test(control.value) ? null : {\n          pattern: {\n            requiredPattern: regexStr,\n            actualValue: control.value\n          }\n        };\n      };\n    }\n    /**\n     * Compose multiple validators into a single function that returns the union\n     * of the individual error maps.\n     * @param {(Function|null|undefined)[]|null} validators\n     * @return {Function|null}\n     */\n  }, {\n    key: 'compose',\n    value: function compose(validators) {\n      if (!validators) return null;\n      var presentValidators = validators.filter(isPresent);\n      if (presentValidators.length === 0) return null;\n      return function (control) {\n        return _mergeErrors(_executeValidators(control, presentValidators));\n      };\n    }\n    /**\n     * Compose multiple async validators into a single function that returns the union\n     * of the individual error maps.\n     * @param {(Function|null|undefined)[]|null} validators\n     * @return {Function|null}\n     */\n  }, {\n    key: 'composeAsync',\n    value: function composeAsync(validators) {\n      if (!validators) return null;\n      var presentValidators = validators.filter(isPresent);\n      if (presentValidators.length === 0) return null;\n      return function (control) {\n        var observables = _executeAsyncValidators(control, presentValidators);\n        return fromPromise(Promise.all(observables), _mergeErrors);\n      };\n    }\n  }]);\n  return Validators;\n}();\n\n/**\n * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n */\nvar VALID = \"VALID\";\n\n/**\n * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n */\nvar INVALID = \"INVALID\";\n\n/**\n * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n * errors are not yet available for the input value.\n */\nvar PENDING = \"PENDING\";\n\n/**\n * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n * calculations of validity or value.\n */\nvar DISABLED = \"DISABLED\";\n\n/**\n * Calculates the control's value according to the input type\n * @param {any} event\n * @return {any}\n */\nfunction getControlValue(event) {\n  if (isEvent(event)) {\n    switch (event.target.type) {\n      case \"checkbox\":\n        return event.target.checked;\n      case \"select-multiple\":\n        if (event.target.options) {\n          var options = event.target.options;\n          var value = [];\n          for (var i = 0, l = options.length; i < l; i++) {\n            if (options[i].selected) {\n              value.push(options[i].value);\n            }\n          }\n          return value;\n        }\n        return event.target.value;\n      default:\n        return isReactNative() ? event.nativeEvent.text : event.target.value;\n    }\n  }\n  return event;\n}\n/**\n * @param {AbstractControl} control\n * @param {(String|Number)[]|String} path\n * @param {String} delimiter\n */\nfunction _find(control, path, delimiter) {\n  if (path == null) return null;\n  if (!(path instanceof Array)) {\n    path = path.split(delimiter);\n  }\n  if (path instanceof Array && path.length === 0) return null;\n  return path.reduce(function (v, name) {\n    if (v instanceof FormGroup) {\n      return v.controls[name] || null;\n    }\n    if (v instanceof FormArray) {\n      return v.at(name) || null;\n    }\n    return null;\n  }, control);\n}\n/**\n * @param {{validators: Function|Function[]|null, asyncValidators: Function|Function[]|null, updateOn: 'change' | 'blur' | 'submit'}} validatorOrOpts\n * @return {Boolean}\n */\nfunction isOptionsObj(validatorOrOpts) {\n  return validatorOrOpts != null && !Array.isArray(validatorOrOpts) && (typeof validatorOrOpts === \"undefined\" ? \"undefined\" : _typeof(validatorOrOpts)) === \"object\";\n}\n/**\n * @param {Function} validator\n * @return {Function}\n */\nfunction normalizeValidator(validator) {\n  if (validator.validate) {\n    return function (c) {\n      return validator.validate(c);\n    };\n  }\n  return validator;\n}\n/**\n * @param {Function} validator\n * @return {Function}\n */\nfunction normalizeAsyncValidator(validator) {\n  if (validator.validate) {\n    return function (c) {\n      return validator.validate(c);\n    };\n  }\n  return validator;\n}\n/**\n * @param {Function[]} validators\n * @return {Function|null}\n */\nfunction composeValidators(validators) {\n  return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\n/**\n * @param {Function[]} validators\n * @return {Function|null}\n */\nfunction composeAsyncValidators(validators) {\n  return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;\n}\nfunction coerceToValidator(validatorOrOpts) {\n  var validator = isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators : validatorOrOpts;\n  return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\nfunction coerceToAsyncValidator(asyncValidator, validatorOrOpts) {\n  var origAsyncValidator = isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators : asyncValidator;\n  return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) : origAsyncValidator || null;\n}\n/**\n * This is the base class for `FormControl`, `FormGroup`, and\n * `FormArray`.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n */\nvar AbstractControl = function () {\n  /**\n   * @param {Function|null} validator\n   * @param {Function|null} asyncValidator\n   */\n\n  function AbstractControl(validator, asyncValidator) {\n    classCallCheck(this, AbstractControl);\n    this.validator = validator;\n    this.asyncValidator = asyncValidator;\n    /**\n     * A control is marked `touched` once the user has triggered\n     * a `blur` event on it.\n     */\n    this.touched = false;\n    this.submitted = false;\n    /**\n     * A control is `pristine` if the user has not yet changed\n     * the value in the UI.\n     *\n     * Note that programmatic changes to a control's value will\n     * *not* mark it dirty.\n     */\n    this.pristine = true;\n    this.meta = {};\n    this._pendingChange = this.updateOn !== \"change\";\n    this._pendingDirty = false;\n    this._pendingTouched = false;\n    this._onDisabledChange = [];\n    this.hasError = this.hasError.bind(this);\n    this.getError = this.getError.bind(this);\n    this.reset = this.reset.bind(this);\n    this.get = this.get.bind(this);\n    this.patchValue = this.patchValue.bind(this);\n    this.setValue = this.setValue.bind(this);\n  }\n  /**\n   * Returns the update strategy of the `AbstractControl` (i.e.\n   * the event on which the control will update itself).\n   * Possible values: `'change'` (default) | `'blur'` | `'submit'`\n   */\n\n  createClass(AbstractControl, [{\n    key: \"setInitialStatus\",\n    value: function setInitialStatus() {\n      if (this.disabled) {\n        this.status = DISABLED;\n      } else {\n        this.status = VALID;\n      }\n    }\n    /**\n     * Disables the control. This means the control will be exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children will be disabled to maintain the model.\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} opts\n     * @return {void}\n     */\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.status = DISABLED;\n      this.errors = null;\n      this._forEachChild(function (control) {\n        control.disable({\n          onlySelf: true\n        });\n      });\n      this._updateValue();\n      if (opts.emitEvent !== false) {\n        this.valueChanges.next(this.value);\n        this.statusChanges.next(this.status);\n        this.stateChanges.next();\n      }\n      this._updateAncestors(!!opts.onlySelf);\n      this._onDisabledChange.forEach(function (changeFn) {\n        return changeFn(true);\n      });\n    }\n    /**\n     * Enables the control. This means the control will be included in validation checks and\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\n     * its validators.\n     *\n     * If the control has children, all children will be enabled.\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} opts\n     * @return {void}\n     */\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.status = VALID;\n      this._forEachChild(function (control) {\n        control.enable({\n          onlySelf: true\n        });\n      });\n      this.updateValueAndValidity({\n        onlySelf: true,\n        emitEvent: opts.emitEvent\n      });\n      this._updateAncestors(!!opts.onlySelf);\n      this._onDisabledChange.forEach(function (changeFn) {\n        return changeFn(false);\n      });\n    }\n    /**\n     * Re-calculates the value and validation status of the control.\n     *\n     * By default, it will also update the value and validity of its ancestors.\n     * @param {{onlySelf: Boolean, emitEvent: Booelan}} options\n     */\n  }, {\n    key: \"updateValueAndValidity\",\n    value: function updateValueAndValidity() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.setInitialStatus();\n      this._updateValue();\n      var shouldValidate = this.enabled && (this.updateOn !== \"submit\" || this.submitted);\n      if (shouldValidate) {\n        this._cancelExistingSubscription();\n        this.errors = this._runValidator();\n        this.status = this._calculateStatus();\n        if (this.status === VALID || this.status === PENDING) {\n          this._runAsyncValidator(true);\n        }\n      }\n      if (options.emitEvent !== false) {\n        this.valueChanges.next(this.value);\n        this.statusChanges.next(this.status);\n        this.stateChanges.next();\n      }\n      if (this.parent && !options.onlySelf) {\n        this.parent.updateValueAndValidity(options);\n      }\n    }\n    /**\n     * Marks the control as `touched`.\n     *\n     * This will also mark all direct ancestors as `touched` to maintain\n     * the model.\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} opts\n     * @return {void}\n     */\n  }, {\n    key: \"markAsTouched\",\n    value: function markAsTouched() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.touched = true;\n      if (this._parent && !opts.onlySelf) {\n        this._parent.markAsTouched(opts);\n      }\n      if (opts.emitEvent) {\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Marks the control as `submitted`.\n     *\n     * If the control has any children, it will also mark all children as `submitted`\n     * @param {{emitEvent: Boolean}} opts\n     * @return {void}\n     */\n  }, {\n    key: \"markAsSubmitted\",\n    value: function markAsSubmitted() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.submitted = true;\n      this._forEachChild(function (control) {\n        control.markAsSubmitted();\n      });\n      if (opts.emitEvent !== false) {\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Marks the control as `unsubmitted`.\n     *\n     * If the control has any children, it will also mark all children as `unsubmitted`.\n     *\n     * @param {{emitEvent: Boolean}} opts\n     * @return {void}\n     */\n  }, {\n    key: \"markAsUnsubmitted\",\n    value: function markAsUnsubmitted() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.submitted = false;\n      this._forEachChild(function (control) {\n        control.markAsUnsubmitted({\n          onlySelf: true\n        });\n      });\n      if (opts.emitEvent !== false) {\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, it will also mark all children as `pristine`\n     * to maintain the model, and re-calculate the `pristine` status of all parent\n     * controls.\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} opts\n     * @return {void}\n     */\n  }, {\n    key: \"markAsPristine\",\n    value: function markAsPristine() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.pristine = true;\n      this._pendingDirty = false;\n      if (opts.emitEvent) {\n        this.stateChanges.next();\n      }\n      this._forEachChild(function (control) {\n        control.markAsPristine({\n          onlySelf: true\n        });\n      });\n      if (this._parent && !opts.onlySelf) {\n        this._parent._updatePristine(opts);\n      }\n    }\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, it will also mark all children as `untouched`\n     * to maintain the model, and re-calculate the `touched` status of all parent\n     * controls.\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} opts\n     * @return {void}\n     */\n  }, {\n    key: \"markAsUntouched\",\n    value: function markAsUntouched() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.touched = false;\n      this._pendingTouched = false;\n      this._forEachChild(function (control) {\n        control.markAsUntouched({\n          onlySelf: true\n        });\n      });\n      if (this._parent && !opts.onlySelf) {\n        this._parent._updateTouched(opts);\n      }\n      if (opts.emitEvent) {\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Marks the control as `dirty`.\n     *\n     * This will also mark all direct ancestors as `dirty` to maintain\n     * the model.\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} opts\n     * @return {void}\n     */\n  }, {\n    key: \"markAsDirty\",\n    value: function markAsDirty() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.pristine = false;\n      if (opts.emitEvent) {\n        this.stateChanges.next();\n      }\n      if (this._parent && !opts.onlySelf) {\n        this._parent.markAsDirty(opts);\n      }\n    }\n    /**\n     * Marks the control as `pending`.\n     * @param {{onlySelf: Boolean}} opts\n     * @return {void}\n     */\n  }, {\n    key: \"markAsPending\",\n    value: function markAsPending() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.status = PENDING;\n      if (this._parent && !opts.onlySelf) {\n        this._parent.markAsPending(opts);\n      }\n    }\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this will overwrite any existing sync validators.\n     * @param {Function|Function[]|null} newValidator\n     * @return {void}\n     */\n  }, {\n    key: \"setValidators\",\n    value: function setValidators(newValidator) {\n      this.validator = coerceToValidator(newValidator);\n    }\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * will overwrite any existing async validators.\n     */\n  }, {\n    key: \"setAsyncValidators\",\n    value: function setAsyncValidators(newValidator) {\n      this.asyncValidator = coerceToAsyncValidator(newValidator);\n    }\n    /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run manually by the user, rather than automatically.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ### Example\n     *\n     * ```\n     * const login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * ```\n     * @param {{onlySelf: boolean}} opts\n     * @return {void}\n     */\n  }, {\n    key: \"setErrors\",\n    value: function setErrors(errors) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.errors = errors;\n      this._updateControlsErrors(opts.emitEvent !== false);\n    }\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * Paths can be passed in as an array or a string delimited by a dot.\n     *\n     * To get a control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {(String|Number)[]|String} path\n     * @return {AbstractControl|null}\n     */\n  }, {\n    key: \"get\",\n    value: function get$$1(path) {\n      return _find(this, path, \".\");\n    }\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {String} errorCode\n     * @param {(String|Number)[]|String} path\n     */\n  }, {\n    key: \"getError\",\n    value: function getError(errorCode, path) {\n      var control = path ? this.get(path) : this;\n      return control && control.errors ? control.errors[errorCode] : null;\n    }\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {String} errorCode\n     * @param {(String|Number)[]|String} path\n     * @return {Booelan}\n     */\n  }, {\n    key: \"hasError\",\n    value: function hasError(errorCode, path) {\n      return !!this.getError(errorCode, path);\n    }\n    /**\n     * Empties out the sync validator list.\n     */\n  }, {\n    key: \"clearValidators\",\n    value: function clearValidators() {\n      this.validator = null;\n    }\n    /**\n     * Empties out the async validator list.\n     */\n  }, {\n    key: \"clearAsyncValidators\",\n    value: function clearAsyncValidators() {\n      this.asyncValidator = null;\n    }\n    /**\n     * @param {FormGroup|FormArray} parent\n     * @return {Void}\n     */\n  }, {\n    key: \"setParent\",\n    value: function setParent(parent) {\n      this._parent = parent;\n    }\n    /**\n     * @param {Boolean} onlySelf\n     */\n  }, {\n    key: \"_updateAncestors\",\n    value: function _updateAncestors(onlySelf) {\n      if (this._parent && !onlySelf) {\n        this._parent.updateValueAndValidity();\n        this._parent._updatePristine();\n        this._parent._updateTouched();\n      }\n    }\n    /**\n     * @param {String} status\n     * @return {Booelan}\n     */\n  }, {\n    key: \"_anyControlsHaveStatus\",\n    value: function _anyControlsHaveStatus(status) {\n      return this._anyControls(function (control) {\n        return control.status === status;\n      });\n    }\n    /**\n     * @return {String}\n     */\n  }, {\n    key: \"_calculateStatus\",\n    value: function _calculateStatus() {\n      if (this._allControlsDisabled()) return DISABLED;\n      if (this.errors) return INVALID;\n      if (this._anyControlsHaveStatus(PENDING)) return PENDING;\n      if (this._anyControlsHaveStatus(INVALID)) return INVALID;\n      return VALID;\n    }\n  }, {\n    key: \"_runValidator\",\n    value: function _runValidator() {\n      return this.validator ? this.validator(this) : null;\n    }\n    /**\n     * @param {Booelan} emitEvent\n     * @return {void}\n     */\n  }, {\n    key: \"_runAsyncValidator\",\n    value: function _runAsyncValidator(emitEvent) {\n      var _this = this;\n      if (this.asyncValidator) {\n        this.status = PENDING;\n        var obs = toObservable(this.asyncValidator(this));\n        this._asyncValidationSubscription = obs.subscribe(function (errors) {\n          return _this.setErrors(errors, {\n            emitEvent: emitEvent\n          });\n        });\n      }\n    }\n  }, {\n    key: \"_cancelExistingSubscription\",\n    value: function _cancelExistingSubscription() {\n      if (this._asyncValidationSubscription) {\n        this._asyncValidationSubscription.unsubscribe();\n      }\n    }\n    /**\n     * @param {{onlySelf: boolean}} opts\n     * @return {void}\n     */\n  }, {\n    key: \"_updatePristine\",\n    value: function _updatePristine() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.pristine = !this._anyControlsDirty();\n      if (this._parent && !opts.onlySelf) {\n        this._parent._updatePristine(opts);\n      }\n    }\n    /**\n     * @param {{onlySelf: boolean}} opts\n     * @return {void}\n     */\n  }, {\n    key: \"_updateTouched\",\n    value: function _updateTouched() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.touched = this._anyControlsTouched();\n      if (this._parent && !opts.onlySelf) {\n        this._parent._updateTouched(opts);\n      }\n    }\n    /**\n     * @return {Boolean}\n     */\n  }, {\n    key: \"_anyControlsDirty\",\n    value: function _anyControlsDirty() {\n      return this._anyControls(function (control) {\n        return control.dirty;\n      });\n    }\n  }, {\n    key: \"_anyControlsUnsubmitted\",\n    value: function _anyControlsUnsubmitted() {\n      return this._anyControls(function (control) {\n        return !control.submitted;\n      });\n    }\n    /**\n     * @return {Boolean}\n     */\n  }, {\n    key: \"_anyControlsTouched\",\n    value: function _anyControlsTouched() {\n      return this._anyControls(function (control) {\n        return control.touched;\n      });\n    }\n    /**\n     * @param {Booelan} emitEvent\n     * @return {void}\n     */\n  }, {\n    key: \"_updateControlsErrors\",\n    value: function _updateControlsErrors(emitEvent) {\n      this.status = this._calculateStatus();\n      if (emitEvent) {\n        this.statusChanges.next();\n        this.stateChanges.next();\n      }\n      if (this._parent) {\n        this._parent._updateControlsErrors(emitEvent);\n      }\n    }\n  }, {\n    key: \"_initObservables\",\n    value: function _initObservables() {\n      this.valueChanges = new Observable();\n      this.statusChanges = new Observable();\n      this.stateChanges = new Observable();\n    }\n    // Abstarct Methods\n    /**\n     * @param {Function} cb\n     * @return {void}\n     */\n  }, {\n    key: \"_forEachChild\",\n    value: function _forEachChild(cb) {}\n  }, {\n    key: \"_updateValue\",\n    value: function _updateValue() {}\n  }, {\n    key: \"_allControlsDisabled\",\n    value: function _allControlsDisabled() {}\n  }, {\n    key: \"_anyControls\",\n    value: function _anyControls() {}\n  }, {\n    key: \"reset\",\n    value: function reset(value, options) {}\n  }, {\n    key: \"setValue\",\n    value: function setValue() {}\n  }, {\n    key: \"patchValue\",\n    value: function patchValue() {}\n  }, {\n    key: \"_registerOnCollectionChange\",\n    value: function _registerOnCollectionChange(fn) {\n      this._onCollectionChange = fn;\n    }\n    /**\n     * @param {{validators: Function|Function[]|null, asyncValidators: Function|Function[]|null, updateOn: 'change' | 'blur' | 'submit'}} opts\n     * @return {Void}\n     */\n  }, {\n    key: \"_setUpdateStrategy\",\n    value: function _setUpdateStrategy(opts) {\n      if (isOptionsObj(opts) && opts.updateOn != null) {\n        this._updateOn = opts.updateOn;\n      }\n    }\n  }, {\n    key: \"updateOn\",\n    get: function get$$1() {\n      return this._updateOn ? this._updateOn : this.parent ? this.parent.updateOn : \"change\";\n    }\n    /**\n     * A control is `dirty` if the user has changed the value\n     * in the UI.\n     *\n     * Note that programmatic changes to a control's value will\n     * *not* mark it dirty.\n     * @return {Boolean}\n     */\n  }, {\n    key: \"dirty\",\n    get: function get$$1() {\n      return !this.pristine;\n    }\n    /**\n     * A control is `valid` when its `status === VALID`.\n     *\n     * In order to have this status, the control must have passed all its\n     * validation checks.\n     * @return {Boolean}\n     */\n  }, {\n    key: \"valid\",\n    get: function get$$1() {\n      return this.status === VALID;\n    }\n    /**\n     * A control is `invalid` when its `status === INVALID`.\n     *\n     * In order to have this status, the control must have failed\n     * at least one of its validation checks.\n     * @return {Boolean}\n     */\n  }, {\n    key: \"invalid\",\n    get: function get$$1() {\n      return this.status === INVALID;\n    }\n    /**\n     * A control is `pending` when its `status === PENDING`.\n     *\n     * In order to have this status, the control must be in the\n     * middle of conducting a validation check.\n     */\n  }, {\n    key: \"pending\",\n    get: function get$$1() {\n      return this.status === PENDING;\n    }\n    /**\n     * The parent control.\n     * * @return {FormGroup|FormArray}\n     */\n  }, {\n    key: \"parent\",\n    get: function get$$1() {\n      return this._parent;\n    }\n    /**\n     * A control is `untouched` if the user has not yet triggered\n     * a `blur` event on it.\n     * @return {Boolean}\n     */\n  }, {\n    key: \"untouched\",\n    get: function get$$1() {\n      return !this.touched;\n    }\n    /**\n     * A control is `enabled` as long as its `status !== DISABLED`.\n     *\n     * In other words, it has a status of `VALID`, `INVALID`, or\n     * `PENDING`.\n     * @return {Boolean}\n     */\n  }, {\n    key: \"enabled\",\n    get: function get$$1() {\n      return this.status !== DISABLED;\n    }\n    /**\n     * A control is disabled if it's status is `DISABLED`\n     */\n  }, {\n    key: \"disabled\",\n    get: function get$$1() {\n      return this.status === DISABLED;\n    }\n    /**\n     * Retrieves the top-level ancestor of this control.\n     * @return {AbstractControl}\n     */\n  }, {\n    key: \"root\",\n    get: function get$$1() {\n      var x = this;\n      while (x._parent) {\n        x = x._parent;\n      }\n      return x;\n    }\n  }]);\n  return AbstractControl;\n}();\nvar FormControl = function (_AbstractControl) {\n  inherits(FormControl, _AbstractControl);\n  function FormControl(formState, validatorOrOpts, asyncValidator) {\n    classCallCheck(this, FormControl);\n    var _this2 = possibleConstructorReturn(this, (FormControl.__proto__ || Object.getPrototypeOf(FormControl)).call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)));\n    _this2.formState = formState;\n    _this2.validatorsOrOpts = validatorOrOpts;\n    _this2._applyFormState(formState);\n    _this2._setUpdateStrategy(validatorOrOpts);\n    _this2._pendingChange = true;\n    _this2._pendingDirty = false;\n    _this2._pendingTouched = false;\n    /**\n     * A control is `active` when its focused.\n     */\n    _this2.active = false;\n    _this2.onValueChanges = new Observable();\n    _this2.onBlurChanges = new Observable();\n    _this2.updateValueAndValidity({\n      onlySelf: true,\n      emitEvent: false\n    });\n    _this2._initObservables();\n    /**\n     * Called whenevers an onChange event triggers.\n     * Updates the control value according to the update strategy.\n     *\n     * @param {any} event\n     * @return {void}\n     */\n    _this2.onChange = function (event) {\n      var value = getControlValue(event);\n      var isDirty = value !== _this2.value;\n      if (_this2.updateOn !== \"change\") {\n        _this2._pendingValue = value;\n        _this2._pendingChange = true;\n        if (isDirty && !_this2._pendingDirty) {\n          _this2._pendingDirty = true;\n        }\n        _this2.stateChanges.next();\n      } else {\n        if (isDirty && !_this2.dirty) {\n          _this2.markAsDirty();\n        }\n        _this2.setValue(value);\n      }\n      _this2.onValueChanges.next(value);\n    };\n    /**\n     * Called whenevers an onBlur event triggers.\n     */\n\n    _this2.onBlur = function () {\n      _this2.active = false;\n      if (_this2.updateOn === \"blur\") {\n        if (_this2._pendingDirty && !_this2.dirty) {\n          _this2.markAsDirty();\n        }\n        if (!_this2.touched) {\n          _this2.markAsTouched();\n        }\n        _this2.setValue(_this2._pendingValue);\n      } else if (_this2.updateOn === \"submit\") {\n        _this2._pendingTouched = true;\n      } else {\n        var emitChangeToView = !_this2.touched;\n        if (!_this2.touched) {\n          _this2.markAsTouched();\n        }\n        if (emitChangeToView) {\n          _this2.stateChanges.next();\n        }\n      }\n      _this2.onBlurChanges.next(_this2._pendingValue);\n    };\n    /**\n     * Called whenevers an onFocus event triggers.\n     */\n    _this2.onFocus = function () {\n      _this2.active = true;\n      _this2.stateChanges.next();\n    };\n    /**\n     * Returns the required props to bind an input element.\n     * @param {string} inputType\n     * @param {any} value\n     */\n    _this2.handler = function (inputType, value) {\n      return getHandler(inputType, value, _this2);\n    };\n    return _this2;\n  }\n  /**\n   * A control is `inactive` when its not focused.\n   * @return {Boolean}\n   */\n\n  createClass(FormControl, [{\n    key: \"setValue\",\n    /**\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} options\n     * @return {void}\n     */\n    value: function setValue(value) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.value = this._pendingValue = value;\n      this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as setValue at this level.\n     * It exists for symmetry with patchValue on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     * @param {any} value\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} options\n     * @return {void}\n     */\n  }, {\n    key: \"patchValue\",\n    value: function patchValue(value) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.setValue(value, options);\n    }\n\n    /**\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} options\n     * @return {void}\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var formState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this._applyFormState(formState);\n      this.markAsPristine(options);\n      this.markAsUntouched(options);\n      this.setValue(this.value, options);\n      this._pendingChange = false;\n    }\n    /**\n     * @param {Function} condition\n     * @return {Boolean}\n     */\n  }, {\n    key: \"_anyControls\",\n    value: function _anyControls(condition) {\n      return false;\n    }\n    /**\n     * @return {Boolean}\n     */\n  }, {\n    key: \"_allControlsDisabled\",\n    value: function _allControlsDisabled() {\n      return this.disabled;\n    }\n    /**\n     * @return {Boolean}\n     */\n  }, {\n    key: \"_isBoxedValue\",\n    value: function _isBoxedValue(formState) {\n      return (typeof formState === \"undefined\" ? \"undefined\" : _typeof(formState)) === \"object\" && formState !== null && Object.keys(formState).length === 2 && \"value\" in formState && \"disabled\" in formState;\n    }\n  }, {\n    key: \"_applyFormState\",\n    value: function _applyFormState(formState) {\n      if (this._isBoxedValue(formState)) {\n        this.value = this._pendingValue = formState.value;\n        if (formState.disabled) {\n          this.disable({\n            onlySelf: true,\n            emitEvent: false\n          });\n        } else {\n          this.enable({\n            onlySelf: true,\n            emitEvent: false\n          });\n        }\n      } else {\n        this.value = this._pendingValue = formState;\n      }\n    }\n  }, {\n    key: \"_syncPendingControls\",\n    value: function _syncPendingControls() {\n      if (this.updateOn === \"submit\") {\n        if (this._pendingDirty) this.markAsDirty();\n        if (this._pendingTouched) this.markAsTouched();\n        if (this._pendingChange) {\n          this.setValue(this._pendingValue);\n          this._pendingChange = false;\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"inactive\",\n    get: function get$$1() {\n      return !this.active;\n    }\n  }]);\n  return FormControl;\n}(AbstractControl);\nvar FormGroup = function (_AbstractControl2) {\n  inherits(FormGroup, _AbstractControl2);\n  function FormGroup(controls, validatorOrOpts, asyncValidator) {\n    classCallCheck(this, FormGroup);\n    var _this3 = possibleConstructorReturn(this, (FormGroup.__proto__ || Object.getPrototypeOf(FormGroup)).call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)));\n    _this3.controls = controls;\n    _this3.validatorOrOpts = validatorOrOpts;\n    _this3._initObservables();\n    _this3._setUpdateStrategy(validatorOrOpts);\n    _this3._setUpControls();\n    _this3.updateValueAndValidity({\n      onlySelf: true,\n      emitEvent: false\n    });\n    _this3.handleSubmit = function (e) {\n      if (e) {\n        e.preventDefault();\n      }\n      if (_this3._anyControlsUnsubmitted()) {\n        _this3.markAsSubmitted({\n          emitEvent: false\n        });\n      }\n      if (!_this3._syncPendingControls()) {\n        _this3.updateValueAndValidity();\n      }\n    };\n    return _this3;\n  }\n  /**\n   * Check whether there is an enabled control with the given name in the group.\n   *\n   * It will return false for disabled controls. If you'd like to check for existence in the group\n   * only, use `AbstractControl` get instead.\n   * @param {String} controlName\n   * @return {Boolean}\n   */\n\n  createClass(FormGroup, [{\n    key: \"contains\",\n    value: function contains(controlName) {\n      return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    }\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control, so for most cases you'll want\n     * to use addControl instead.\n     * @param {String} name\n     * @param {AbstractControl} control\n     * @return {AbstractControl}\n     */\n  }, {\n    key: \"registerControl\",\n    value: function registerControl(name, control) {\n      if (this.controls[name]) return this.controls[name];\n      this.controls[name] = control;\n      control.setParent(this);\n      control._registerOnCollectionChange(this._onCollectionChange);\n      return control;\n    }\n\n    /**\n     * Add a control to this group.\n     * @param {String} name\n     * @param {AbstractControl} control\n     * @return {void}\n     */\n  }, {\n    key: \"addControl\",\n    value: function addControl(name, control) {\n      this.registerControl(name, control);\n      this.updateValueAndValidity();\n      this._onCollectionChange();\n    }\n\n    /**\n     * Remove a control from this group.\n     * @param {String} name\n     * @return {void}\n     */\n  }, {\n    key: \"removeControl\",\n    value: function removeControl(name) {\n      if (this.controls[name]) this.controls[name]._registerOnCollectionChange(function () {});\n      delete this.controls[name];\n      this.updateValueAndValidity();\n      this._onCollectionChange();\n    }\n\n    /**\n     * Replace an existing control.\n     * @param {String} name\n     * @param {AbstractControl} control\n     * @return {void}\n     */\n  }, {\n    key: \"setControl\",\n    value: function setControl(name, control) {\n      if (this.controls[name]) this.controls[name]._registerOnCollectionChange(function () {});\n      delete this.controls[name];\n      if (control) this.registerControl(name, control);\n      this.updateValueAndValidity();\n      this._onCollectionChange();\n    }\n    /**\n     * Sets the value of the FormGroup. It accepts an object that matches\n     * the structure of the group, with control names as keys.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *  form.setValue({first: 'Jon', last: 'Snow'});\n     *  console.log(form.value);   // {first: 'Jon', last: 'Snow'}\n     * @param {{[key: string]: any}} value\n     * @param {{onlySelf: boolean, emitEvent: boolean}} options\n     * @return {void}\n     */\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      var _this4 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this._checkAllValuesPresent(value);\n      Object.keys(value).forEach(function (name) {\n        _this4._throwIfControlMissing(name);\n        _this4.controls[name].setValue(value[name], {\n          onlySelf: true,\n          emitEvent: options.emitEvent\n        });\n      });\n      this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormGroup`.\n     * @param {any} value\n     * @param {{onlySelf: boolean, emitEvent: boolean}} options\n     * @return {void}\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this._forEachChild(function (control, name) {\n        control.reset(value[name], {\n          onlySelf: true,\n          emitEvent: options.emitEvent\n        });\n      });\n      this.updateValueAndValidity(options);\n      this.markAsUnsubmitted();\n      this._updatePristine(options);\n      this._updateTouched(options);\n    }\n    /**\n     *  Patches the value of the FormGroup. It accepts an object with control\n     *  names as keys, and will do its best to match the values to the correct controls\n     *  in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     *  ### Example\n     *  ```\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.patchValue({first: 'Jon'});\n     *  console.log(form.value);   // {first: 'Jon', last: null}\n     *\n     *  ```\n     * @param {{[key: string]: any}} value\n     * @param {{onlySelf: boolean, emitEvent: boolean}} options\n     * @return {void}\n     */\n  }, {\n    key: \"patchValue\",\n    value: function patchValue(value) {\n      var _this5 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      Object.keys(value).forEach(function (name) {\n        if (_this5.controls[name]) {\n          _this5.controls[name].patchValue(value[name], {\n            onlySelf: true,\n            emitEvent: options.emitEvent\n          });\n        }\n      });\n      this.updateValueAndValidity(options);\n    }\n    /**\n     * The aggregate value of the FormGroup, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the group.\n     */\n  }, {\n    key: \"getRawValue\",\n    value: function getRawValue() {\n      return this._reduceChildren({}, function (acc, control, name) {\n        acc[name] = control instanceof FormControl ? control.value : control.getRawValue();\n        return acc;\n      });\n    }\n    /**\n     * @param {{(v: any, k: String) => void}} callback\n     * @return {void}\n     */\n  }, {\n    key: \"_forEachChild\",\n    value: function _forEachChild(callback) {\n      var _this6 = this;\n      Object.keys(this.controls).forEach(function (k) {\n        return callback(_this6.controls[k], k);\n      });\n    }\n  }, {\n    key: \"_onCollectionChange\",\n    value: function _onCollectionChange() {}\n    /**\n     * @param {Function} condition\n     * @return {Boolean}\n     */\n  }, {\n    key: \"_anyControls\",\n    value: function _anyControls(condition) {\n      var _this7 = this;\n      var res = false;\n      this._forEachChild(function (control, name) {\n        res = res || _this7.contains(name) && condition(control);\n      });\n      return res;\n    }\n  }, {\n    key: \"_updateValue\",\n    value: function _updateValue() {\n      this.value = this._reduceValue();\n    }\n  }, {\n    key: \"_reduceValue\",\n    value: function _reduceValue() {\n      var _this8 = this;\n      return this._reduceChildren({}, function (acc, control, name) {\n        if (control.enabled || _this8.disabled) {\n          acc[name] = control.value;\n        }\n        return acc;\n      });\n    }\n  }, {\n    key: \"_reduceErrors\",\n    value: function _reduceErrors() {\n      var _this9 = this;\n      return this._reduceChildren({}, function (acc, control, name) {\n        if (control.enabled || _this9.disabled) {\n          acc[name] = control.errors;\n        }\n        return acc;\n      });\n    }\n    /**\n     * @param {Function} fn\n     */\n  }, {\n    key: \"_reduceChildren\",\n    value: function _reduceChildren(initValue, fn) {\n      var res = initValue;\n      this._forEachChild(function (control, name) {\n        res = fn(res, control, name);\n      });\n      return res;\n    }\n  }, {\n    key: \"_setUpControls\",\n    value: function _setUpControls() {\n      var _this10 = this;\n      this._forEachChild(function (control) {\n        control.setParent(_this10);\n        control._registerOnCollectionChange(_this10._onCollectionChange);\n      });\n    }\n    /**\n     * @return {Boolean}\n     */\n  }, {\n    key: \"_allControlsDisabled\",\n    value: function _allControlsDisabled() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n      try {\n        for (var _iterator = Object.keys(this.controls)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var controlName = _step.value;\n          if (this.controls[controlName].enabled) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      return Object.keys(this.controls).length > 0 || this.disabled;\n    }\n  }, {\n    key: \"_checkAllValuesPresent\",\n    value: function _checkAllValuesPresent(value) {\n      this._forEachChild(function (control, name) {\n        if (value[name] === undefined) {\n          throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n        }\n      });\n    }\n  }, {\n    key: \"_throwIfControlMissing\",\n    value: function _throwIfControlMissing(name) {\n      if (!Object.keys(this.controls).length) {\n        throw new Error(\"\\n        There are no form controls registered with this group yet.\\n      \");\n      }\n      if (!this.controls[name]) {\n        throw new Error(\"Cannot find form control with name: \" + name + \".\");\n      }\n    }\n  }, {\n    key: \"_syncPendingControls\",\n    value: function _syncPendingControls() {\n      var subtreeUpdated = this._reduceChildren(false, function (updated, child) {\n        return child._syncPendingControls() ? true : updated;\n      });\n      if (subtreeUpdated) this.updateValueAndValidity();\n      return subtreeUpdated;\n    }\n  }]);\n  return FormGroup;\n}(AbstractControl);\nvar FormArray = function (_AbstractControl3) {\n  inherits(FormArray, _AbstractControl3);\n  function FormArray(controls, validatorOrOpts, asyncValidator) {\n    classCallCheck(this, FormArray);\n    var _this11 = possibleConstructorReturn(this, (FormArray.__proto__ || Object.getPrototypeOf(FormArray)).call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)));\n    _this11.controls = controls;\n    _this11.validatorOrOpts = validatorOrOpts;\n    _this11._initObservables();\n    _this11._setUpdateStrategy(validatorOrOpts);\n    _this11._setUpControls();\n    _this11.updateValueAndValidity({\n      onlySelf: true,\n      emitEvent: false\n    });\n    _this11.handleSubmit = function (e) {\n      if (e) {\n        e.preventDefault();\n      }\n      if (_this11._anyControlsUnsubmitted()) {\n        _this11.markAsSubmitted({\n          emitEvent: false\n        });\n      }\n      if (!_this11._syncPendingControls()) {\n        _this11.updateValueAndValidity();\n      }\n    };\n    return _this11;\n  }\n  /**\n   * Get the `AbstractControl` at the given `index` in the array.\n   * @param {Number} index\n   * @return {AbstractControl}\n   */\n\n  createClass(FormArray, [{\n    key: \"at\",\n    value: function at(index) {\n      return this.controls[index];\n    }\n\n    /**\n     * Insert a new `AbstractControl` at the end of the array.\n     * @param {AbstractControl} control\n     * @return {Void}\n     */\n  }, {\n    key: \"push\",\n    value: function push(control) {\n      this.controls.push(control);\n      this._registerControl(control);\n      this.updateValueAndValidity();\n      this._onCollectionChange();\n    }\n\n    /**\n     * Insert a new `AbstractControl` at the given `index` in the array.\n     * @param {Number} index\n     * @param {AbstractControl} control\n     */\n  }, {\n    key: \"insert\",\n    value: function insert(index, control) {\n      this.controls.splice(index, 0, control);\n      this._registerControl(control);\n      this.updateValueAndValidity();\n      this._onCollectionChange();\n    }\n\n    /**\n     * Remove the control at the given `index` in the array.\n     * @param {Number} index\n     */\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(index) {\n      if (this.controls[index]) this.controls[index]._registerOnCollectionChange(function () {});\n      this.controls.splice(index, 1);\n      this.updateValueAndValidity();\n      this._onCollectionChange();\n    }\n\n    /**\n     * Replace an existing control.\n     * @param {Number} index\n     * @param {AbstractControl} control\n     */\n  }, {\n    key: \"setControl\",\n    value: function setControl(index, control) {\n      if (this.controls[index]) this.controls[index]._registerOnCollectionChange(function () {});\n      this.controls.splice(index, 1);\n      if (control) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n      }\n      this.updateValueAndValidity();\n      this._onCollectionChange();\n    }\n\n    /**\n     * Length of the control array.\n     * @return {Number}\n     */\n  }, {\n    key: \"setValue\",\n    /**\n     * Sets the value of the `FormArray`. It accepts an array that matches\n     * the structure of the control.\n     * @param {any[]} value\n     * @param {{onlySelf?: boolean, emitEvent?: boolean}} options\n     */\n    value: function setValue(value) {\n      var _this12 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this._checkAllValuesPresent(value);\n      value.forEach(function (newValue, index) {\n        _this12._throwIfControlMissing(index);\n        _this12.at(index).setValue(newValue, {\n          onlySelf: true,\n          emitEvent: options.emitEvent\n        });\n      });\n      this.updateValueAndValidity(options);\n    }\n\n    /**\n     *  Patches the value of the `FormArray`. It accepts an array that matches the\n     *  structure of the control, and will do its best to match the values to the correct\n     *  controls in the group.\n     * @param {any[]} value\n     * @param {{onlySelf?: boolean, emitEvent?: boolean}} options\n     */\n  }, {\n    key: \"patchValue\",\n    value: function patchValue(value) {\n      var _this13 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      value.forEach(function (newValue, index) {\n        if (_this13.at(index)) {\n          _this13.at(index).patchValue(newValue, {\n            onlySelf: true,\n            emitEvent: options.emitEvent\n          });\n        }\n      });\n      this.updateValueAndValidity(options);\n    }\n\n    /**\n     * Resets the `FormArray`.\n     * @param {any[]} value\n     * @param {{onlySelf?: boolean, emitEvent?: boolean}} options\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this._forEachChild(function (control, index) {\n        control.reset(value[index], {\n          onlySelf: true,\n          emitEvent: options.emitEvent\n        });\n      });\n      this.updateValueAndValidity(options);\n      this.markAsUnsubmitted();\n      this._updatePristine(options);\n      this._updateTouched(options);\n    }\n\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the array.\n     * @return {any[]}\n     */\n  }, {\n    key: \"getRawValue\",\n    value: function getRawValue() {\n      return this.controls.map(function (control) {\n        return control instanceof FormControl ? control.value : control.getRawValue();\n      });\n    }\n  }, {\n    key: \"_syncPendingControls\",\n    value: function _syncPendingControls() {\n      var subtreeUpdated = this.controls.reduce(function (updated, child) {\n        return child._syncPendingControls() ? true : updated;\n      }, false);\n      if (subtreeUpdated) this.updateValueAndValidity();\n      return subtreeUpdated;\n    }\n  }, {\n    key: \"_throwIfControlMissing\",\n    value: function _throwIfControlMissing(index) {\n      if (!this.controls.length) {\n        throw new Error(\"\\n        There are no form controls registered with this array yet.\\n      \");\n      }\n      if (!this.at(index)) {\n        throw new Error(\"Cannot find form control at index \" + index);\n      }\n    }\n  }, {\n    key: \"_forEachChild\",\n    value: function _forEachChild(cb) {\n      this.controls.forEach(function (control, index) {\n        cb(control, index);\n      });\n    }\n  }, {\n    key: \"_updateValue\",\n    value: function _updateValue() {\n      var _this14 = this;\n      this.value = this.controls.filter(function (control) {\n        return control.enabled || _this14.disabled;\n      }).map(function (control) {\n        return control.value;\n      });\n    }\n  }, {\n    key: \"_anyControls\",\n    value: function _anyControls(condition) {\n      return this.controls.some(function (control) {\n        return control.enabled && condition(control);\n      });\n    }\n  }, {\n    key: \"_setUpControls\",\n    value: function _setUpControls() {\n      var _this15 = this;\n      this._forEachChild(function (control) {\n        return _this15._registerControl(control);\n      });\n    }\n  }, {\n    key: \"_checkAllValuesPresent\",\n    value: function _checkAllValuesPresent(value) {\n      this._forEachChild(function (control, i) {\n        if (value[i] === undefined) {\n          throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n        }\n      });\n    }\n  }, {\n    key: \"_allControlsDisabled\",\n    value: function _allControlsDisabled() {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n      try {\n        for (var _iterator2 = this.controls[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var control = _step2.value;\n          if (control.enabled) return false;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n      return this.controls.length > 0 || this.disabled;\n    }\n  }, {\n    key: \"_registerControl\",\n    value: function _registerControl(control) {\n      control.setParent(this);\n      control._registerOnCollectionChange(this._onCollectionChange);\n    }\n  }, {\n    key: \"_onCollectionChange\",\n    value: function _onCollectionChange() {}\n  }, {\n    key: \"length\",\n    get: function get$$1() {\n      return this.controls.length;\n    }\n  }]);\n  return FormArray;\n}(AbstractControl);\nfunction _createControl(controlConfig) {\n  if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup || controlConfig instanceof FormArray) {\n    return controlConfig;\n  } else if (Array.isArray(controlConfig)) {\n    var value = controlConfig[0];\n    var validator = controlConfig.length > 1 ? controlConfig[1] : null;\n    var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n    var updateOn = controlConfig.length > 3 ? controlConfig[3] : null;\n    return FormBuilder.control(value, validator, asyncValidator, updateOn);\n  }\n  return FormBuilder.control(controlConfig);\n}\nfunction _reduceControls(controlsConfig) {\n  var controls = {};\n  Object.keys(controlsConfig).forEach(function (controlName) {\n    controls[controlName] = _createControl(controlsConfig[controlName]);\n  });\n  return controls;\n}\nvar FormBuilder = function () {\n  function FormBuilder() {\n    classCallCheck(this, FormBuilder);\n  }\n  createClass(FormBuilder, null, [{\n    key: 'group',\n    /**\n     * Construct a new `FormGroup` with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `validators`, `asyncValidators` & `updateOn`.\n     * @param {{[key: string]: any}} controlsConfig\n     * @param {{[key: string]: any}|null} extra\n     * @return {FormGroup}\n     */\n    value: function group(controlsConfig, extra) {\n      var controls = _reduceControls(controlsConfig);\n      var validators = extra != null ? extra.validators : null;\n      var asyncValidators = extra != null ? extra.asyncValidators : null;\n      var updateOn = extra != null ? extra.updateOn : null;\n      return new FormGroup(controls, {\n        validators: validators,\n        asyncValidators: asyncValidators,\n        updateOn: updateOn\n      });\n    }\n    /**\n     * Construct a `FormArray` from the given `controlsConfig` array of\n     * Valid keys for the `extra` parameter map are `validators`, `asyncValidators` & `updateOn`.\n     */\n  }, {\n    key: 'array',\n    value: function array(controlsConfig, extra) {\n      var controls = controlsConfig.map(function (c) {\n        return _createControl(c);\n      });\n      var validators = extra != null ? extra.validators : null;\n      var asyncValidators = extra != null ? extra.asyncValidators : null;\n      var updateOn = extra != null ? extra.updateOn : null;\n      return new FormArray(controls, {\n        validators: validators,\n        asyncValidators: asyncValidators,\n        updateOn: updateOn\n      });\n    }\n\n    /**\n     * Construct a new `FormControl` with the given `formState`,`validator`,`asyncValidator`\n     * and `updateOn`\n     * `formState` can either be a standalone value for the form control or an object\n     * that contains both a value and a disabled status.\n     * @param {Object} formState\n     * @param {Function|Function[]|null} validator\n     * @param {Function|Function[]|null} asyncValidator\n     * @param {string} updatOn\n     * @return {FormControl}\n     */\n  }, {\n    key: 'control',\n    value: function control(formState, validators, asyncValidators, updateOn) {\n      return new FormControl(formState, {\n        validators: validators,\n        asyncValidators: asyncValidators,\n        updateOn: updateOn\n      });\n    }\n  }]);\n  return FormBuilder;\n}();\nvar Field = function (_React$Component) {\n  inherits(Field, _React$Component);\n  function Field() {\n    classCallCheck(this, Field);\n    return possibleConstructorReturn(this, (Field.__proto__ || Object.getPrototypeOf(Field)).apply(this, arguments));\n  }\n  createClass(Field, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var control = this.props.control;\n      // Add listener\n\n      this.addListener(control);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var control = this.props.control;\n      if (control !== prevProps.control) {\n        this.removeListener(control);\n        this.addListener(control);\n      }\n    }\n  }, {\n    key: 'addListener',\n    value: function addListener(control) {\n      var _this2 = this;\n      if (control) {\n        control.stateChanges.subscribe(function () {\n          _this2.forceUpdate();\n        });\n      }\n    }\n  }, {\n    key: 'removeListener',\n    value: function removeListener(control) {\n      if (control) {\n        if (control.stateChanges.observers) {\n          control.stateChanges.observers.forEach(function (observer) {\n            control.stateChanges.unsubscribe(observer);\n          });\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var control = this.props.control;\n      // Remove Listener\n\n      this.removeListener(control);\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(props) {\n      if (!props.strict) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: 'getComponent',\n    value: function getComponent() {\n      var _props = this.props,\n        render = _props.render,\n        children = _props.children,\n        control = _props.control;\n      warning(control, 'Missing Control.Please make sure that an instance of FormControl, FormGroup or FormArray must be passed as a control prop in the Field component');\n      if (control) {\n        // Render function as child\n        if (isFunction(children)) {\n          return children(control);\n        }\n        // Render function as render prop\n        if (isFunction(render)) {\n          return render(control);\n        }\n        return null;\n      }\n      return null;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return this.getComponent();\n    }\n  }]);\n  return Field;\n}(React.Component);\nField.defaultProps = {\n  strict: true\n};\nField.propTypes = {\n  strict: PropTypes.bool,\n  control: PropTypes.oneOfType([PropTypes.instanceOf(FormControl), PropTypes.instanceOf(FormArray), PropTypes.instanceOf(FormGroup)]).isRequired,\n  render: PropTypes.func\n};\nvar getControlFromReference = function getControlFromReference(reference, options, formState) {\n  switch (reference) {\n    case 'FormGroup':\n      return new FormGroup({}, options);\n    case 'FormArray':\n      return new FormArray([], options);\n    case 'FormControl':\n      return new FormControl(formState, options);\n    default:\n      return null;\n  }\n};\nvar configureControl = function configureControl(props, context, reference) {\n  var name = props.name,\n    parent = props.parent,\n    options = props.options,\n    index = props.index,\n    control = props.control,\n    formState = props.formState,\n    meta = props.meta;\n  var parentControl = parent || context;\n  var returnControl = null;\n  if (control) {\n    if (reference === 'FormGroup' && control instanceof FormGroup) {\n      returnControl = control;\n    } else if (reference === 'FormArray' && control instanceof FormArray) {\n      returnControl = control;\n    } else if (reference === 'FormControl' && control instanceof FormControl) {\n      returnControl = control;\n    } else {\n      warning(null, 'Control should be an instance of ' + reference + '.');\n    }\n  } else {\n    if (name) {\n      /**\n       * The presence of name prop signifies two things:-\n       * 1. The group control has to be added as a nested control i.e parent should be present.\n       * 2. Parent must be an instance of FormGroup\n       */\n      warning(parentControl, 'Error in ' + name + ' control: Missing parent control.\\n             Please make sure that the component is wrapped in a FieldGroup or\\n             you can explicitly pass a parent control as a parent prop.');\n      warning(parentControl && parentControl instanceof FormGroup, 'Error in ' + name + ' control: A name prop can only be used if the parent is an instance of FormGroup,\\n             You can use the index prop instead of name, if the parent control is an instance of FormArray');\n      if (parentControl && parentControl instanceof FormGroup) {\n        /**\n         * Check the presence of the control, if a control is already present in the parent control\n         * then don't add a new control, return the same.\n         */\n        if (!parentControl.get(name)) {\n          parentControl.addControl(name, getControlFromReference(reference, options, formState));\n        }\n        returnControl = parentControl.get(name);\n      }\n    } else {\n      if (parentControl instanceof FormArray) {\n        /**\n         * If a index prop is defined then insert the control at a particular index otherwise\n         * push the control at the end of FormArray\n         */\n        var insertAtIndex = index !== undefined ? index : parentControl.controls.length;\n        parentControl.insert(insertAtIndex, getControlFromReference(reference, options, formState));\n        returnControl = parentControl.at(insertAtIndex);\n      } else {\n        // Create a new instance and return as control in case of FormArray and FormGroup\n        if (reference === 'FormGroup' || reference === 'FormArray') {\n          returnControl = getControlFromReference(reference, options, formState);\n        }\n      }\n    }\n  }\n  // Add the meta data about the control\n  if (returnControl && meta) {\n    returnControl.meta = meta;\n  }\n  return returnControl;\n};\nvar FieldGroup = function FieldGroup(props) {\n  var strict = props.strict,\n    children = props.children,\n    render = props.render;\n  var context = useContext(FormControlContext);\n  var control = configureControl(props, context, 'FormGroup');\n  var FieldProps = {\n    control: control,\n    strict: strict,\n    render: render || children || null\n  };\n  return React.createElement(FormControlContext.Provider, {\n    value: control\n  }, React.createElement(Field, FieldProps));\n};\nFieldGroup.defaultProps = {\n  strict: true\n};\nFieldGroup.propTypes = {\n  strict: PropTypes.bool,\n  render: PropTypes.func,\n  name: PropTypes.string,\n  index: PropTypes.number,\n  control: PropTypes.instanceOf(FormGroup),\n  options: PropTypes.shape({\n    validators: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]),\n    asyncValidators: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]),\n    updateOn: PropTypes.oneOf(['change', 'blur', 'submit'])\n  }),\n  parent: PropTypes.oneOfType([PropTypes.instanceOf(FormArray), PropTypes.instanceOf(FormGroup)]),\n  meta: PropTypes.object\n};\nfunction usePrevious(value) {\n  var ref = useRef();\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}\nvar FieldControl = function FieldControl(props) {\n  var strict = props.strict,\n    children = props.children,\n    render = props.render,\n    name = props.name,\n    parent = props.parent,\n    options = props.options,\n    index = props.index,\n    control = props.control,\n    formState = props.formState,\n    meta = props.meta;\n  var context = useContext(FormControlContext);\n  var _useState = useState(configureControl(props, context, 'FormControl')),\n    _useState2 = slicedToArray(_useState, 2),\n    formControl = _useState2[0],\n    setControl = _useState2[1];\n  var FieldProps = {\n    control: formControl,\n    strict: strict,\n    render: render || children || null\n  };\n  var prevName = usePrevious(name);\n  useEffect(function () {\n    if (name !== prevName) {\n      setControl(configureControl({\n        name: name,\n        parent: parent,\n        options: options,\n        index: index,\n        control: control,\n        formState: formState,\n        meta: meta\n      }, context, 'FormControl'));\n    }\n  }, [name, parent, options, index, control, formState, meta, context]);\n  return React.createElement(Field, FieldProps);\n};\nFieldControl.defaultProps = {\n  strict: true\n};\nFieldControl.propTypes = {\n  strict: PropTypes.bool,\n  render: PropTypes.func,\n  name: PropTypes.string,\n  index: PropTypes.number,\n  control: PropTypes.instanceOf(FormControl),\n  formState: PropTypes.oneOfType([PropTypes.shape({\n    value: PropTypes.any,\n    disabled: PropTypes.bool\n  }), PropTypes.any]),\n  options: PropTypes.shape({\n    validators: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]),\n    asyncValidators: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]),\n    updateOn: PropTypes.oneOf(['change', 'blur', 'submit'])\n  }),\n  parent: PropTypes.oneOfType([PropTypes.instanceOf(FormArray), PropTypes.instanceOf(FormGroup)]),\n  meta: PropTypes.object\n};\nvar FieldArray = function FieldArray(props) {\n  var strict = props.strict,\n    children = props.children,\n    render = props.render;\n  var context = useContext(FormControlContext);\n  var control = configureControl(props, context, 'FormArray');\n  var FieldProps = {\n    control: control,\n    strict: strict,\n    render: render || children || null\n  };\n  return React.createElement(FormControlContext.Provider, {\n    value: control\n  }, React.createElement(Field, FieldProps));\n};\nFieldArray.defaultProps = {\n  strict: true\n};\nFieldArray.propTypes = {\n  strict: PropTypes.bool,\n  render: PropTypes.func,\n  name: PropTypes.string,\n  index: PropTypes.number,\n  control: PropTypes.instanceOf(FormArray),\n  options: PropTypes.shape({\n    validators: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]),\n    asyncValidators: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]),\n    updateOn: PropTypes.oneOf(['change', 'blur', 'submit'])\n  }),\n  parent: PropTypes.oneOfType([PropTypes.instanceOf(FormArray), PropTypes.instanceOf(FormGroup)]),\n  meta: PropTypes.object\n};\nvar FIELD_CONFIG_STRING = '$field_';\nvar FormGenerator = function (_React$Component) {\n  inherits(FormGenerator, _React$Component);\n  function FormGenerator(props) {\n    classCallCheck(this, FormGenerator);\n\n    // Intiate the form property\n    var _this = possibleConstructorReturn(this, (FormGenerator.__proto__ || Object.getPrototypeOf(FormGenerator)).call(this, props));\n    _this.form = null;\n    return _this;\n  }\n  createClass(FormGenerator, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.props.onMount(this.form);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.props.onMount(this.form);\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps) {\n      // Only Re-renders for changes in field config\n      if (nextProps.fieldConfig !== this.props.fieldConfig) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var onUnmount = this.props.onUnmount;\n      onUnmount();\n    }\n    // Create the form instance\n  }, {\n    key: 'configureForm',\n    value: function configureForm() {\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FormGroup';\n      var fieldConfig = this.props.fieldConfig;\n      this.form = configureControl(fieldConfig, {}, type);\n    }\n    // Creates the control from fieldConfig.\n  }, {\n    key: 'setControl',\n    value: function setControl(configProps, key) {\n      var _this2 = this;\n      var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      // Map the props to be passed in Field\n      var propsToBePassed = mapConfigToFieldProps(configProps);\n      // Set the key\n      propsToBePassed.key = key;\n      if (name) {\n        propsToBePassed.name = name;\n      }\n      // Set the component for $field_\n      if (name && name.startsWith(FIELD_CONFIG_STRING) || typeof configProps.index === 'string' && configProps.index.startsWith(FIELD_CONFIG_STRING)) {\n        // Only subscribe when isStatic is false\n        if (configProps.isStatic === false) {\n          return React.createElement(Field, Object.assign({}, {\n            control: this.form\n          }, propsToBePassed));\n        }\n        return propsToBePassed.render();\n      }\n      if (configProps.controls) {\n        if (configProps.controls instanceof Array) {\n          // If controls is an array then configure FormArray\n          if (!this.form) {\n            this.configureForm('FormArray');\n            propsToBePassed.control = this.form;\n          }\n          return React.createElement(FieldArray, Object.assign({}, propsToBePassed, {\n            render: function render() {\n              return configProps.controls.map(function (config, index) {\n                return _this2.setControl(config, key + '_' + index);\n              });\n            }\n          }));\n        } else if (configProps.controls instanceof Object) {\n          // If controls is an object then configure FormGroup\n          if (!this.form) {\n            this.configureForm();\n            propsToBePassed.control = this.form;\n          }\n          return React.createElement(FieldGroup, Object.assign({}, propsToBePassed, {\n            render: function render() {\n              return Object.keys(configProps.controls).map(function (key) {\n                return _this2.setControl(configProps.controls[key], key, key);\n              });\n            }\n          }));\n        } else {\n          warning(false, 'Missing controls in fieldConfig.');\n          return null;\n        }\n      } else {\n        return React.createElement(FieldControl, propsToBePassed);\n      }\n    }\n  }, {\n    key: 'generateFields',\n    value: function generateFields() {\n      // Reset the form instance\n      this.form = null;\n      var fieldConfig = this.props.fieldConfig;\n      if (fieldConfig.controls) {\n        var fields = this.setControl(fieldConfig, generateKey('my_form'));\n        return fields;\n      } else {\n        // Throw error\n        warning(false, 'Missing controls in fieldConfig.');\n        return null;\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var fieldConfig = this.props.fieldConfig;\n      if (fieldConfig) {\n        return this.generateFields();\n      }\n      return null;\n    }\n  }]);\n  return FormGenerator;\n}(React.Component);\nFormGenerator.propTypes = {\n  fieldConfig: PropTypes.shape({\n    controls: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n    strict: PropTypes.bool,\n    render: PropTypes.func,\n    name: PropTypes.string,\n    index: PropTypes.number,\n    control: PropTypes.oneOfType([PropTypes.instanceOf(FormArray), PropTypes.instanceOf(FormGroup)]),\n    options: PropTypes.shape({\n      validators: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]),\n      asyncValidators: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]),\n      updateOn: PropTypes.oneOf(['change', 'blur', 'submit'])\n    }),\n    parent: PropTypes.oneOfType([PropTypes.instanceOf(FormArray), PropTypes.instanceOf(FormGroup)]),\n    meta: PropTypes.object\n  }).isRequired,\n  onMount: PropTypes.func,\n  onUnmount: PropTypes.func\n};\nFormGenerator.defaultProps = {\n  onMount: function onMount() {\n    return null;\n  },\n  onUnmount: function onUnmount() {\n    return null;\n  }\n};\nexport { FormBuilder, FormGroup, FormControl, FormArray, Validators, Field, FieldGroup, FieldControl, FieldArray, FormGenerator };","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useRef","PropTypes","_typeof","Symbol","iterator","obj","constructor","prototype","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","inherits","subClass","superClass","create","value","setPrototypeOf","__proto__","possibleConstructorReturn","self","call","ReferenceError","slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","err","Array","isArray","Observable","observers","subscribe","fn","unsubscribe","filter","item","o","thisObj","scope","window","forEach","FormControlContext","fromPromise","r","cb","observable","then","mappedValue","error","isPromise","isFunction","isObservable","toObservable","obs","Error","isReactNative","navigator","product","isEvent","candidate","stopPropagation","preventDefault","controlsToBeMap","ReactNative","switch","onValueChange","onBlur","onFocus","disabled","default","onChange","editable","getAbsoluteValue","getInputControls","inputType","getHandler","control","controlObject","inputControls","keys","controlProperty","updateOn","_pendingValue","mappedObject","warning","condition","message","process","env","NODE_ENV","console","generateKey","pre","Date","getTime","FIELD_PROPS","mapConfigToFieldProps","config","configKey","indexOf","isEmptyInputValue","isPresent","_mergeErrors","arrayOfErrors","res","reduce","errors","assign","_executeValidators","validators","map","v","_executeAsyncValidators","EMAIL_REGEXP","Validators","min","_min","parsedValue","parseFloat","isNaN","actual","max","_max","required","requiredTrue","email","test","minLength","_minLength","requiredLength","actualLength","maxLength","_maxLength","pattern","_pattern","regex","regexStr","RegExp","toString","requiredPattern","actualValue","compose","presentValidators","composeAsync","observables","Promise","all","VALID","INVALID","PENDING","DISABLED","getControlValue","event","type","checked","options","l","selected","nativeEvent","text","_find","path","delimiter","split","name","FormGroup","controls","FormArray","at","isOptionsObj","validatorOrOpts","normalizeValidator","validator","validate","c","normalizeAsyncValidator","composeValidators","composeAsyncValidators","coerceToValidator","coerceToAsyncValidator","asyncValidator","origAsyncValidator","asyncValidators","AbstractControl","touched","submitted","pristine","meta","_pendingChange","_pendingDirty","_pendingTouched","_onDisabledChange","hasError","bind","getError","reset","get","patchValue","setValue","setInitialStatus","status","disable","opts","arguments","_forEachChild","onlySelf","_updateValue","emitEvent","valueChanges","statusChanges","stateChanges","_updateAncestors","changeFn","enable","updateValueAndValidity","shouldValidate","enabled","_cancelExistingSubscription","_runValidator","_calculateStatus","_runAsyncValidator","parent","markAsTouched","_parent","markAsSubmitted","markAsUnsubmitted","markAsPristine","_updatePristine","markAsUntouched","_updateTouched","markAsDirty","markAsPending","setValidators","newValidator","setAsyncValidators","setErrors","_updateControlsErrors","get$$1","errorCode","clearValidators","clearAsyncValidators","setParent","_anyControlsHaveStatus","_anyControls","_allControlsDisabled","_this","_asyncValidationSubscription","_anyControlsDirty","_anyControlsTouched","dirty","_anyControlsUnsubmitted","_initObservables","_registerOnCollectionChange","_onCollectionChange","_setUpdateStrategy","_updateOn","x","FormControl","_AbstractControl","formState","_this2","getPrototypeOf","validatorsOrOpts","_applyFormState","active","onValueChanges","onBlurChanges","isDirty","emitChangeToView","handler","_isBoxedValue","_syncPendingControls","_AbstractControl2","_this3","_setUpControls","handleSubmit","e","contains","controlName","hasOwnProperty","registerControl","addControl","removeControl","setControl","_this4","_checkAllValuesPresent","_throwIfControlMissing","_this5","getRawValue","_reduceChildren","acc","callback","_this6","k","_this7","_reduceValue","_this8","_reduceErrors","_this9","initValue","_this10","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","return","subtreeUpdated","updated","child","_AbstractControl3","_this11","index","_registerControl","insert","splice","removeAt","_this12","newValue","_this13","_this14","some","_this15","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_createControl","controlConfig","FormBuilder","_reduceControls","controlsConfig","group","extra","array","Field","_React$Component","apply","componentDidMount","addListener","componentDidUpdate","prevProps","removeListener","forceUpdate","observer","componentWillUnmount","shouldComponentUpdate","strict","getComponent","_props","render","children","Component","defaultProps","propTypes","bool","oneOfType","instanceOf","isRequired","func","getControlFromReference","reference","configureControl","context","parentControl","returnControl","insertAtIndex","FieldGroup","FieldProps","createElement","Provider","string","number","shape","arrayOf","oneOf","object","usePrevious","ref","current","FieldControl","_useState","_useState2","formControl","prevName","any","FieldArray","FIELD_CONFIG_STRING","FormGenerator","form","onMount","nextProps","fieldConfig","onUnmount","configureForm","configProps","propsToBePassed","startsWith","isStatic","generateFields","fields"],"sources":["D:/Practice/learning-app/node_modules/react-reactive-form/dist/react-reactive-form.es.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar Observable = function () {\n  function Observable() {\n    classCallCheck(this, Observable);\n\n    this.observers = [];\n  }\n\n  createClass(Observable, [{\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      this.observers.push(fn);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(fn) {\n      if (fn) {\n        this.observers = this.observers.filter(function (item) {\n          if (item !== fn) {\n            return item;\n          }\n          return null;\n        });\n      } else {\n        this.observers = [];\n      }\n    }\n  }, {\n    key: \"next\",\n    value: function next(o, thisObj) {\n      var scope = thisObj || window;\n      this.observers.forEach(function (item) {\n        item.call(scope, o);\n      });\n    }\n  }]);\n  return Observable;\n}();\n\nvar FormControlContext = createContext(null);\n\n/** Converts a promise into Observable\n * @param {Promise} r\n * @param {(value: any) => any} cb\n * @returns {Observable}\n */\nfunction fromPromise(r, cb) {\n  var observable = new Observable();\n  r.then(function (value) {\n    var mappedValue = function mappedValue(value) {\n      return cb ? cb(value) : value;\n    };\n    observable.next(mappedValue(value));\n  }, function (error) {\n    observable.next(error);\n  }).then(null, function (error) {\n    throw error;\n  });\n  return observable;\n}\n/**\n * Checks if an object is a Promise\n * @param {Observable} obj\n * @returns {boolean}\n */\nfunction isPromise(obj) {\n  return !!obj && typeof obj.then === 'function';\n}\n/**\n * Checks if an object is a Function\n * @param {any} obj\n * @returns {boolean}\n */\nfunction isFunction(obj) {\n  return 'function' === typeof obj;\n}\n/**\n * Checks if an object is Observable\n * @param {Observable} obj\n * @returns {boolean}\n */\nfunction isObservable(obj) {\n  return !!obj && typeof obj.subscribe === 'function';\n}\n/**\n * Converts an object into Observable\n * @param {any} r\n * @returns {Observable}\n */\nfunction toObservable(r) {\n  var obs = isPromise(r) ? fromPromise(r) : r;\n  if (!isObservable(obs)) {\n    throw new Error('Expected validator to return Promise or Observable.');\n  }\n  return obs;\n}\nvar isReactNative = function isReactNative() {\n  return typeof window !== 'undefined' && window.navigator && window.navigator.product && window.navigator.product === 'ReactNative';\n};\nvar isEvent = function isEvent(candidate) {\n  return !!(candidate && candidate.stopPropagation && candidate.preventDefault);\n};\nvar controlsToBeMap = {\n  ReactNative: {\n    switch: {\n      value: 'value',\n      onValueChange: 'onChange',\n      onBlur: 'onBlur',\n      onFocus: 'onFocus',\n      disabled: 'disabled'\n    },\n    default: {\n      value: 'value',\n      onChange: 'onChange',\n      onBlur: 'onBlur',\n      onFocus: 'onFocus',\n      editable: 'enabled'\n    }\n  },\n  default: {\n    value: 'value',\n    onChange: 'onChange',\n    onBlur: 'onBlur',\n    onFocus: 'onFocus',\n    disabled: 'disabled'\n  }\n};\nvar getAbsoluteValue = function getAbsoluteValue(value) {\n  return value === undefined || value === null ? '' : value;\n};\n\nvar getInputControls = function getInputControls(inputType) {\n  return isReactNative() ? controlsToBeMap.ReactNative[inputType] || controlsToBeMap.ReactNative.default : controlsToBeMap.default;\n};\n\nfunction getHandler(inputType, value, control) {\n  var controlObject = {};\n  var inputControls = getInputControls(inputType);\n  Object.keys(inputControls).forEach(function (key) {\n    var controlProperty = null;\n    if (key === 'value') {\n      if (control.updateOn !== 'change') {\n        controlProperty = getAbsoluteValue(control._pendingValue);\n      } else {\n        controlProperty = getAbsoluteValue(control.value);\n      }\n    } else {\n      controlProperty = control[inputControls[key]];\n    }\n    controlObject[key] = controlProperty;\n  });\n  var mappedObject = controlObject;\n  switch (inputType) {\n    case 'checkbox':\n      mappedObject['checked'] = !!mappedObject.value;\n      mappedObject['type'] = inputType;\n      break;\n    case 'radio':\n      mappedObject['checked'] = mappedObject.value === value;\n      mappedObject.value = value;\n      mappedObject['type'] = inputType;\n      break;\n    default:\n  }\n  return mappedObject;\n}\n/**\n * Display warning messages\n * @param {condition} any\n * @param {message} string\n * @returns {void}\n */\nfunction warning(condition, message) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!condition) {\n      console.error('Warning: ' + message);\n    }\n  }\n}\n/**\n * Generates the unique key for react elements\n * @param {*} pre\n */\nvar generateKey = function generateKey(pre) {\n  return pre + '_' + new Date().getTime();\n};\n\nvar FIELD_PROPS = ['strict', 'render', 'name', 'index', 'control', 'formState', 'options', 'parent', 'meta'];\n\nvar mapConfigToFieldProps = function mapConfigToFieldProps(config) {\n  var props = {};\n  if (config) {\n    Object.keys(config).forEach(function (configKey) {\n      if (FIELD_PROPS.indexOf(configKey) > -1) {\n        props[configKey] = config[configKey];\n      }\n    });\n  }\n  return props;\n};\n\nfunction isEmptyInputValue(value) {\n  return value == null || value.length === 0;\n}\nfunction isPresent(o) {\n  return o != null;\n}\nfunction _mergeErrors(arrayOfErrors) {\n  var res = arrayOfErrors.reduce(function (res, errors) {\n    return errors != null ? Object.assign({}, res, errors) : res;\n  }, {});\n  return Object.keys(res).length === 0 ? null : res;\n}\nfunction _executeValidators(control, validators) {\n  return validators.map(function (v) {\n    return v(control);\n  });\n}\nfunction _executeAsyncValidators(control, validators) {\n  return validators.map(function (v) {\n    return v(control);\n  });\n}\n\nvar EMAIL_REGEXP = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nvar Validators = function () {\n  function Validators() {\n    classCallCheck(this, Validators);\n  }\n\n  createClass(Validators, null, [{\n    key: 'min',\n\n    /**\n     * Validator that requires controls to have a value greater than a number.\n     */\n    value: function min(_min) {\n      return function (control) {\n        if (isEmptyInputValue(control.value) || isEmptyInputValue(_min)) {\n          return null; // don't validate empty values to allow optional controls\n        }\n        var parsedValue = parseFloat(control.value);\n        return !isNaN(parsedValue) && parsedValue < _min ? { min: { min: _min, actual: parsedValue } } : null;\n      };\n    }\n\n    /**\n     * Validator that requires controls to have a value less than a number.\n     */\n\n  }, {\n    key: 'max',\n    value: function max(_max) {\n      return function (control) {\n        if (isEmptyInputValue(control.value) || isEmptyInputValue(_max)) {\n          return null; // don't validate empty values to allow optional controls\n        }\n        var parsedValue = parseFloat(control.value);\n        return !isNaN(parsedValue) && parsedValue > _max ? { max: { max: _max, actual: parsedValue } } : null;\n      };\n    }\n\n    /**\n     * Validator that requires controls to have a non-empty value.\n     */\n\n  }, {\n    key: 'required',\n    value: function required(control) {\n      return isEmptyInputValue(control.value) ? { required: true } : null;\n    }\n\n    /**\n     * Validator that requires control value to be true.\n     */\n\n  }, {\n    key: 'requiredTrue',\n    value: function requiredTrue(control) {\n      return control.value === true ? null : { required: true };\n    }\n\n    /**\n     * Validator that performs email validation.\n     */\n\n  }, {\n    key: 'email',\n    value: function email(control) {\n      if (isEmptyInputValue(control.value)) {\n        return null;\n      }\n      return EMAIL_REGEXP.test(control.value) ? null : { email: true };\n    }\n\n    /**\n     * Validator that requires controls to have a value of a minimum length.\n     */\n\n  }, {\n    key: 'minLength',\n    value: function minLength(_minLength) {\n      return function (control) {\n        if (isEmptyInputValue(control.value)) {\n          return null; // don't validate empty values to allow optional controls\n        }\n        var length = control.value ? control.value.length : 0;\n        return length < _minLength ? { minLength: { requiredLength: _minLength, actualLength: length } } : null;\n      };\n    }\n\n    /**\n     * Validator that requires controls to have a value of a maximum length.\n     */\n\n  }, {\n    key: 'maxLength',\n    value: function maxLength(_maxLength) {\n      return function (control) {\n        var length = control.value ? control.value.length : 0;\n        return length > _maxLength ? { maxLength: { requiredLength: _maxLength, actualLength: length } } : null;\n      };\n    }\n    /**\n     * Validator that requires a control to match a regex to its value.\n     */\n\n  }, {\n    key: 'pattern',\n    value: function pattern(_pattern) {\n      if (!_pattern) return null;\n      var regex = void 0;\n      var regexStr = void 0;\n      if (typeof _pattern === 'string') {\n        regexStr = '^' + _pattern + '$';\n        regex = new RegExp(regexStr);\n      } else {\n        regexStr = _pattern.toString();\n        regex = _pattern;\n      }\n      return function (control) {\n        if (isEmptyInputValue(control.value)) {\n          return null; // don't validate empty values to allow optional controls\n        }\n        return regex.test(control.value) ? null : { pattern: { requiredPattern: regexStr, actualValue: control.value } };\n      };\n    }\n    /**\n     * Compose multiple validators into a single function that returns the union\n     * of the individual error maps.\n     * @param {(Function|null|undefined)[]|null} validators\n     * @return {Function|null}\n     */\n\n  }, {\n    key: 'compose',\n    value: function compose(validators) {\n      if (!validators) return null;\n      var presentValidators = validators.filter(isPresent);\n      if (presentValidators.length === 0) return null;\n      return function (control) {\n        return _mergeErrors(_executeValidators(control, presentValidators));\n      };\n    }\n    /**\n     * Compose multiple async validators into a single function that returns the union\n     * of the individual error maps.\n     * @param {(Function|null|undefined)[]|null} validators\n     * @return {Function|null}\n     */\n\n  }, {\n    key: 'composeAsync',\n    value: function composeAsync(validators) {\n      if (!validators) return null;\n      var presentValidators = validators.filter(isPresent);\n      if (presentValidators.length === 0) return null;\n      return function (control) {\n        var observables = _executeAsyncValidators(control, presentValidators);\n        return fromPromise(Promise.all(observables), _mergeErrors);\n      };\n    }\n  }]);\n  return Validators;\n}();\n\n/**\n * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n */\nvar VALID = \"VALID\";\n\n/**\n * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n */\nvar INVALID = \"INVALID\";\n\n/**\n * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n * errors are not yet available for the input value.\n */\nvar PENDING = \"PENDING\";\n\n/**\n * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n * calculations of validity or value.\n */\nvar DISABLED = \"DISABLED\";\n\n/**\n * Calculates the control's value according to the input type\n * @param {any} event\n * @return {any}\n */\nfunction getControlValue(event) {\n  if (isEvent(event)) {\n    switch (event.target.type) {\n      case \"checkbox\":\n        return event.target.checked;\n      case \"select-multiple\":\n        if (event.target.options) {\n          var options = event.target.options;\n          var value = [];\n          for (var i = 0, l = options.length; i < l; i++) {\n            if (options[i].selected) {\n              value.push(options[i].value);\n            }\n          }\n          return value;\n        }\n        return event.target.value;\n      default:\n        return isReactNative() ? event.nativeEvent.text : event.target.value;\n    }\n  }\n  return event;\n}\n/**\n * @param {AbstractControl} control\n * @param {(String|Number)[]|String} path\n * @param {String} delimiter\n */\nfunction _find(control, path, delimiter) {\n  if (path == null) return null;\n  if (!(path instanceof Array)) {\n    path = path.split(delimiter);\n  }\n  if (path instanceof Array && path.length === 0) return null;\n  return path.reduce(function (v, name) {\n    if (v instanceof FormGroup) {\n      return v.controls[name] || null;\n    }\n    if (v instanceof FormArray) {\n      return v.at(name) || null;\n    }\n    return null;\n  }, control);\n}\n/**\n * @param {{validators: Function|Function[]|null, asyncValidators: Function|Function[]|null, updateOn: 'change' | 'blur' | 'submit'}} validatorOrOpts\n * @return {Boolean}\n */\nfunction isOptionsObj(validatorOrOpts) {\n  return validatorOrOpts != null && !Array.isArray(validatorOrOpts) && (typeof validatorOrOpts === \"undefined\" ? \"undefined\" : _typeof(validatorOrOpts)) === \"object\";\n}\n/**\n * @param {Function} validator\n * @return {Function}\n */\nfunction normalizeValidator(validator) {\n  if (validator.validate) {\n    return function (c) {\n      return validator.validate(c);\n    };\n  }\n  return validator;\n}\n/**\n * @param {Function} validator\n * @return {Function}\n */\nfunction normalizeAsyncValidator(validator) {\n  if (validator.validate) {\n    return function (c) {\n      return validator.validate(c);\n    };\n  }\n  return validator;\n}\n/**\n * @param {Function[]} validators\n * @return {Function|null}\n */\nfunction composeValidators(validators) {\n  return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\n/**\n * @param {Function[]} validators\n * @return {Function|null}\n */\nfunction composeAsyncValidators(validators) {\n  return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;\n}\n\nfunction coerceToValidator(validatorOrOpts) {\n  var validator = isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators : validatorOrOpts;\n  return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n\nfunction coerceToAsyncValidator(asyncValidator, validatorOrOpts) {\n  var origAsyncValidator = isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators : asyncValidator;\n  return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) : origAsyncValidator || null;\n}\n/**\n * This is the base class for `FormControl`, `FormGroup`, and\n * `FormArray`.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n */\nvar AbstractControl = function () {\n  /**\n   * @param {Function|null} validator\n   * @param {Function|null} asyncValidator\n   */\n\n  function AbstractControl(validator, asyncValidator) {\n    classCallCheck(this, AbstractControl);\n\n    this.validator = validator;\n    this.asyncValidator = asyncValidator;\n    /**\n     * A control is marked `touched` once the user has triggered\n     * a `blur` event on it.\n     */\n    this.touched = false;\n    this.submitted = false;\n    /**\n     * A control is `pristine` if the user has not yet changed\n     * the value in the UI.\n     *\n     * Note that programmatic changes to a control's value will\n     * *not* mark it dirty.\n     */\n    this.pristine = true;\n    this.meta = {};\n    this._pendingChange = this.updateOn !== \"change\";\n    this._pendingDirty = false;\n    this._pendingTouched = false;\n    this._onDisabledChange = [];\n    this.hasError = this.hasError.bind(this);\n    this.getError = this.getError.bind(this);\n    this.reset = this.reset.bind(this);\n    this.get = this.get.bind(this);\n    this.patchValue = this.patchValue.bind(this);\n    this.setValue = this.setValue.bind(this);\n  }\n  /**\n   * Returns the update strategy of the `AbstractControl` (i.e.\n   * the event on which the control will update itself).\n   * Possible values: `'change'` (default) | `'blur'` | `'submit'`\n   */\n\n\n  createClass(AbstractControl, [{\n    key: \"setInitialStatus\",\n    value: function setInitialStatus() {\n      if (this.disabled) {\n        this.status = DISABLED;\n      } else {\n        this.status = VALID;\n      }\n    }\n    /**\n     * Disables the control. This means the control will be exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children will be disabled to maintain the model.\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} opts\n     * @return {void}\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this.status = DISABLED;\n      this.errors = null;\n      this._forEachChild(function (control) {\n        control.disable({\n          onlySelf: true\n        });\n      });\n      this._updateValue();\n\n      if (opts.emitEvent !== false) {\n        this.valueChanges.next(this.value);\n        this.statusChanges.next(this.status);\n        this.stateChanges.next();\n      }\n\n      this._updateAncestors(!!opts.onlySelf);\n      this._onDisabledChange.forEach(function (changeFn) {\n        return changeFn(true);\n      });\n    }\n    /**\n     * Enables the control. This means the control will be included in validation checks and\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\n     * its validators.\n     *\n     * If the control has children, all children will be enabled.\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} opts\n     * @return {void}\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this.status = VALID;\n      this._forEachChild(function (control) {\n        control.enable({\n          onlySelf: true\n        });\n      });\n      this.updateValueAndValidity({\n        onlySelf: true,\n        emitEvent: opts.emitEvent\n      });\n      this._updateAncestors(!!opts.onlySelf);\n      this._onDisabledChange.forEach(function (changeFn) {\n        return changeFn(false);\n      });\n    }\n    /**\n     * Re-calculates the value and validation status of the control.\n     *\n     * By default, it will also update the value and validity of its ancestors.\n     * @param {{onlySelf: Boolean, emitEvent: Booelan}} options\n     */\n\n  }, {\n    key: \"updateValueAndValidity\",\n    value: function updateValueAndValidity() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this.setInitialStatus();\n      this._updateValue();\n      var shouldValidate = this.enabled && (this.updateOn !== \"submit\" || this.submitted);\n      if (shouldValidate) {\n        this._cancelExistingSubscription();\n        this.errors = this._runValidator();\n        this.status = this._calculateStatus();\n        if (this.status === VALID || this.status === PENDING) {\n          this._runAsyncValidator(true);\n        }\n      }\n      if (options.emitEvent !== false) {\n        this.valueChanges.next(this.value);\n        this.statusChanges.next(this.status);\n        this.stateChanges.next();\n      }\n      if (this.parent && !options.onlySelf) {\n        this.parent.updateValueAndValidity(options);\n      }\n    }\n    /**\n     * Marks the control as `touched`.\n     *\n     * This will also mark all direct ancestors as `touched` to maintain\n     * the model.\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} opts\n     * @return {void}\n     */\n\n  }, {\n    key: \"markAsTouched\",\n    value: function markAsTouched() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this.touched = true;\n      if (this._parent && !opts.onlySelf) {\n        this._parent.markAsTouched(opts);\n      }\n      if (opts.emitEvent) {\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Marks the control as `submitted`.\n     *\n     * If the control has any children, it will also mark all children as `submitted`\n     * @param {{emitEvent: Boolean}} opts\n     * @return {void}\n     */\n\n  }, {\n    key: \"markAsSubmitted\",\n    value: function markAsSubmitted() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this.submitted = true;\n\n      this._forEachChild(function (control) {\n        control.markAsSubmitted();\n      });\n\n      if (opts.emitEvent !== false) {\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Marks the control as `unsubmitted`.\n     *\n     * If the control has any children, it will also mark all children as `unsubmitted`.\n     *\n     * @param {{emitEvent: Boolean}} opts\n     * @return {void}\n     */\n\n  }, {\n    key: \"markAsUnsubmitted\",\n    value: function markAsUnsubmitted() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this.submitted = false;\n\n      this._forEachChild(function (control) {\n        control.markAsUnsubmitted({\n          onlySelf: true\n        });\n      });\n\n      if (opts.emitEvent !== false) {\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, it will also mark all children as `pristine`\n     * to maintain the model, and re-calculate the `pristine` status of all parent\n     * controls.\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} opts\n     * @return {void}\n     */\n\n  }, {\n    key: \"markAsPristine\",\n    value: function markAsPristine() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this.pristine = true;\n      this._pendingDirty = false;\n      if (opts.emitEvent) {\n        this.stateChanges.next();\n      }\n      this._forEachChild(function (control) {\n        control.markAsPristine({\n          onlySelf: true\n        });\n      });\n      if (this._parent && !opts.onlySelf) {\n        this._parent._updatePristine(opts);\n      }\n    }\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, it will also mark all children as `untouched`\n     * to maintain the model, and re-calculate the `touched` status of all parent\n     * controls.\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} opts\n     * @return {void}\n     */\n\n  }, {\n    key: \"markAsUntouched\",\n    value: function markAsUntouched() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this.touched = false;\n      this._pendingTouched = false;\n      this._forEachChild(function (control) {\n        control.markAsUntouched({\n          onlySelf: true\n        });\n      });\n      if (this._parent && !opts.onlySelf) {\n        this._parent._updateTouched(opts);\n      }\n      if (opts.emitEvent) {\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Marks the control as `dirty`.\n     *\n     * This will also mark all direct ancestors as `dirty` to maintain\n     * the model.\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} opts\n     * @return {void}\n     */\n\n  }, {\n    key: \"markAsDirty\",\n    value: function markAsDirty() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this.pristine = false;\n      if (opts.emitEvent) {\n        this.stateChanges.next();\n      }\n      if (this._parent && !opts.onlySelf) {\n        this._parent.markAsDirty(opts);\n      }\n    }\n    /**\n     * Marks the control as `pending`.\n     * @param {{onlySelf: Boolean}} opts\n     * @return {void}\n     */\n\n  }, {\n    key: \"markAsPending\",\n    value: function markAsPending() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this.status = PENDING;\n\n      if (this._parent && !opts.onlySelf) {\n        this._parent.markAsPending(opts);\n      }\n    }\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this will overwrite any existing sync validators.\n     * @param {Function|Function[]|null} newValidator\n     * @return {void}\n     */\n\n  }, {\n    key: \"setValidators\",\n    value: function setValidators(newValidator) {\n      this.validator = coerceToValidator(newValidator);\n    }\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * will overwrite any existing async validators.\n     */\n\n  }, {\n    key: \"setAsyncValidators\",\n    value: function setAsyncValidators(newValidator) {\n      this.asyncValidator = coerceToAsyncValidator(newValidator);\n    }\n    /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run manually by the user, rather than automatically.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ### Example\n     *\n     * ```\n     * const login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * ```\n     * @param {{onlySelf: boolean}} opts\n     * @return {void}\n     */\n\n  }, {\n    key: \"setErrors\",\n    value: function setErrors(errors) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this.errors = errors;\n      this._updateControlsErrors(opts.emitEvent !== false);\n    }\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * Paths can be passed in as an array or a string delimited by a dot.\n     *\n     * To get a control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {(String|Number)[]|String} path\n     * @return {AbstractControl|null}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get$$1(path) {\n      return _find(this, path, \".\");\n    }\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {String} errorCode\n     * @param {(String|Number)[]|String} path\n     */\n\n  }, {\n    key: \"getError\",\n    value: function getError(errorCode, path) {\n      var control = path ? this.get(path) : this;\n      return control && control.errors ? control.errors[errorCode] : null;\n    }\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {String} errorCode\n     * @param {(String|Number)[]|String} path\n     * @return {Booelan}\n     */\n\n  }, {\n    key: \"hasError\",\n    value: function hasError(errorCode, path) {\n      return !!this.getError(errorCode, path);\n    }\n    /**\n     * Empties out the sync validator list.\n     */\n\n  }, {\n    key: \"clearValidators\",\n    value: function clearValidators() {\n      this.validator = null;\n    }\n    /**\n     * Empties out the async validator list.\n     */\n\n  }, {\n    key: \"clearAsyncValidators\",\n    value: function clearAsyncValidators() {\n      this.asyncValidator = null;\n    }\n    /**\n     * @param {FormGroup|FormArray} parent\n     * @return {Void}\n     */\n\n  }, {\n    key: \"setParent\",\n    value: function setParent(parent) {\n      this._parent = parent;\n    }\n    /**\n     * @param {Boolean} onlySelf\n     */\n\n  }, {\n    key: \"_updateAncestors\",\n    value: function _updateAncestors(onlySelf) {\n      if (this._parent && !onlySelf) {\n        this._parent.updateValueAndValidity();\n        this._parent._updatePristine();\n        this._parent._updateTouched();\n      }\n    }\n    /**\n     * @param {String} status\n     * @return {Booelan}\n     */\n\n  }, {\n    key: \"_anyControlsHaveStatus\",\n    value: function _anyControlsHaveStatus(status) {\n      return this._anyControls(function (control) {\n        return control.status === status;\n      });\n    }\n    /**\n     * @return {String}\n     */\n\n  }, {\n    key: \"_calculateStatus\",\n    value: function _calculateStatus() {\n      if (this._allControlsDisabled()) return DISABLED;\n      if (this.errors) return INVALID;\n      if (this._anyControlsHaveStatus(PENDING)) return PENDING;\n      if (this._anyControlsHaveStatus(INVALID)) return INVALID;\n      return VALID;\n    }\n  }, {\n    key: \"_runValidator\",\n    value: function _runValidator() {\n      return this.validator ? this.validator(this) : null;\n    }\n    /**\n     * @param {Booelan} emitEvent\n     * @return {void}\n     */\n\n  }, {\n    key: \"_runAsyncValidator\",\n    value: function _runAsyncValidator(emitEvent) {\n      var _this = this;\n\n      if (this.asyncValidator) {\n        this.status = PENDING;\n        var obs = toObservable(this.asyncValidator(this));\n        this._asyncValidationSubscription = obs.subscribe(function (errors) {\n          return _this.setErrors(errors, {\n            emitEvent: emitEvent\n          });\n        });\n      }\n    }\n  }, {\n    key: \"_cancelExistingSubscription\",\n    value: function _cancelExistingSubscription() {\n      if (this._asyncValidationSubscription) {\n        this._asyncValidationSubscription.unsubscribe();\n      }\n    }\n    /**\n     * @param {{onlySelf: boolean}} opts\n     * @return {void}\n     */\n\n  }, {\n    key: \"_updatePristine\",\n    value: function _updatePristine() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this.pristine = !this._anyControlsDirty();\n      if (this._parent && !opts.onlySelf) {\n        this._parent._updatePristine(opts);\n      }\n    }\n    /**\n     * @param {{onlySelf: boolean}} opts\n     * @return {void}\n     */\n\n  }, {\n    key: \"_updateTouched\",\n    value: function _updateTouched() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this.touched = this._anyControlsTouched();\n      if (this._parent && !opts.onlySelf) {\n        this._parent._updateTouched(opts);\n      }\n    }\n    /**\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"_anyControlsDirty\",\n    value: function _anyControlsDirty() {\n      return this._anyControls(function (control) {\n        return control.dirty;\n      });\n    }\n  }, {\n    key: \"_anyControlsUnsubmitted\",\n    value: function _anyControlsUnsubmitted() {\n      return this._anyControls(function (control) {\n        return !control.submitted;\n      });\n    }\n    /**\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"_anyControlsTouched\",\n    value: function _anyControlsTouched() {\n      return this._anyControls(function (control) {\n        return control.touched;\n      });\n    }\n    /**\n     * @param {Booelan} emitEvent\n     * @return {void}\n     */\n\n  }, {\n    key: \"_updateControlsErrors\",\n    value: function _updateControlsErrors(emitEvent) {\n      this.status = this._calculateStatus();\n      if (emitEvent) {\n        this.statusChanges.next();\n        this.stateChanges.next();\n      }\n      if (this._parent) {\n        this._parent._updateControlsErrors(emitEvent);\n      }\n    }\n  }, {\n    key: \"_initObservables\",\n    value: function _initObservables() {\n      this.valueChanges = new Observable();\n      this.statusChanges = new Observable();\n      this.stateChanges = new Observable();\n    }\n    // Abstarct Methods\n    /**\n     * @param {Function} cb\n     * @return {void}\n     */\n\n  }, {\n    key: \"_forEachChild\",\n    value: function _forEachChild(cb) {}\n  }, {\n    key: \"_updateValue\",\n    value: function _updateValue() {}\n  }, {\n    key: \"_allControlsDisabled\",\n    value: function _allControlsDisabled() {}\n  }, {\n    key: \"_anyControls\",\n    value: function _anyControls() {}\n  }, {\n    key: \"reset\",\n    value: function reset(value, options) {}\n  }, {\n    key: \"setValue\",\n    value: function setValue() {}\n  }, {\n    key: \"patchValue\",\n    value: function patchValue() {}\n  }, {\n    key: \"_registerOnCollectionChange\",\n    value: function _registerOnCollectionChange(fn) {\n      this._onCollectionChange = fn;\n    }\n    /**\n     * @param {{validators: Function|Function[]|null, asyncValidators: Function|Function[]|null, updateOn: 'change' | 'blur' | 'submit'}} opts\n     * @return {Void}\n     */\n\n  }, {\n    key: \"_setUpdateStrategy\",\n    value: function _setUpdateStrategy(opts) {\n      if (isOptionsObj(opts) && opts.updateOn != null) {\n        this._updateOn = opts.updateOn;\n      }\n    }\n  }, {\n    key: \"updateOn\",\n    get: function get$$1() {\n      return this._updateOn ? this._updateOn : this.parent ? this.parent.updateOn : \"change\";\n    }\n    /**\n     * A control is `dirty` if the user has changed the value\n     * in the UI.\n     *\n     * Note that programmatic changes to a control's value will\n     * *not* mark it dirty.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"dirty\",\n    get: function get$$1() {\n      return !this.pristine;\n    }\n    /**\n     * A control is `valid` when its `status === VALID`.\n     *\n     * In order to have this status, the control must have passed all its\n     * validation checks.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"valid\",\n    get: function get$$1() {\n      return this.status === VALID;\n    }\n    /**\n     * A control is `invalid` when its `status === INVALID`.\n     *\n     * In order to have this status, the control must have failed\n     * at least one of its validation checks.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"invalid\",\n    get: function get$$1() {\n      return this.status === INVALID;\n    }\n    /**\n     * A control is `pending` when its `status === PENDING`.\n     *\n     * In order to have this status, the control must be in the\n     * middle of conducting a validation check.\n     */\n\n  }, {\n    key: \"pending\",\n    get: function get$$1() {\n      return this.status === PENDING;\n    }\n    /**\n     * The parent control.\n     * * @return {FormGroup|FormArray}\n     */\n\n  }, {\n    key: \"parent\",\n    get: function get$$1() {\n      return this._parent;\n    }\n    /**\n     * A control is `untouched` if the user has not yet triggered\n     * a `blur` event on it.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"untouched\",\n    get: function get$$1() {\n      return !this.touched;\n    }\n    /**\n     * A control is `enabled` as long as its `status !== DISABLED`.\n     *\n     * In other words, it has a status of `VALID`, `INVALID`, or\n     * `PENDING`.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"enabled\",\n    get: function get$$1() {\n      return this.status !== DISABLED;\n    }\n    /**\n     * A control is disabled if it's status is `DISABLED`\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get$$1() {\n      return this.status === DISABLED;\n    }\n    /**\n     * Retrieves the top-level ancestor of this control.\n     * @return {AbstractControl}\n     */\n\n  }, {\n    key: \"root\",\n    get: function get$$1() {\n      var x = this;\n      while (x._parent) {\n        x = x._parent;\n      }\n      return x;\n    }\n  }]);\n  return AbstractControl;\n}();\nvar FormControl = function (_AbstractControl) {\n  inherits(FormControl, _AbstractControl);\n\n  function FormControl(formState, validatorOrOpts, asyncValidator) {\n    classCallCheck(this, FormControl);\n\n    var _this2 = possibleConstructorReturn(this, (FormControl.__proto__ || Object.getPrototypeOf(FormControl)).call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)));\n\n    _this2.formState = formState;\n    _this2.validatorsOrOpts = validatorOrOpts;\n    _this2._applyFormState(formState);\n    _this2._setUpdateStrategy(validatorOrOpts);\n    _this2._pendingChange = true;\n    _this2._pendingDirty = false;\n    _this2._pendingTouched = false;\n    /**\n     * A control is `active` when its focused.\n     */\n    _this2.active = false;\n    _this2.onValueChanges = new Observable();\n    _this2.onBlurChanges = new Observable();\n    _this2.updateValueAndValidity({\n      onlySelf: true,\n      emitEvent: false\n    });\n    _this2._initObservables();\n    /**\n     * Called whenevers an onChange event triggers.\n     * Updates the control value according to the update strategy.\n     *\n     * @param {any} event\n     * @return {void}\n     */\n    _this2.onChange = function (event) {\n      var value = getControlValue(event);\n      var isDirty = value !== _this2.value;\n      if (_this2.updateOn !== \"change\") {\n        _this2._pendingValue = value;\n        _this2._pendingChange = true;\n        if (isDirty && !_this2._pendingDirty) {\n          _this2._pendingDirty = true;\n        }\n        _this2.stateChanges.next();\n      } else {\n        if (isDirty && !_this2.dirty) {\n          _this2.markAsDirty();\n        }\n        _this2.setValue(value);\n      }\n      _this2.onValueChanges.next(value);\n    };\n    /**\n     * Called whenevers an onBlur event triggers.\n     */\n\n    _this2.onBlur = function () {\n      _this2.active = false;\n      if (_this2.updateOn === \"blur\") {\n        if (_this2._pendingDirty && !_this2.dirty) {\n          _this2.markAsDirty();\n        }\n        if (!_this2.touched) {\n          _this2.markAsTouched();\n        }\n        _this2.setValue(_this2._pendingValue);\n      } else if (_this2.updateOn === \"submit\") {\n        _this2._pendingTouched = true;\n      } else {\n        var emitChangeToView = !_this2.touched;\n        if (!_this2.touched) {\n          _this2.markAsTouched();\n        }\n        if (emitChangeToView) {\n          _this2.stateChanges.next();\n        }\n      }\n      _this2.onBlurChanges.next(_this2._pendingValue);\n    };\n    /**\n     * Called whenevers an onFocus event triggers.\n     */\n    _this2.onFocus = function () {\n      _this2.active = true;\n      _this2.stateChanges.next();\n    };\n    /**\n     * Returns the required props to bind an input element.\n     * @param {string} inputType\n     * @param {any} value\n     */\n    _this2.handler = function (inputType, value) {\n      return getHandler(inputType, value, _this2);\n    };\n    return _this2;\n  }\n  /**\n   * A control is `inactive` when its not focused.\n   * @return {Boolean}\n   */\n\n\n  createClass(FormControl, [{\n    key: \"setValue\",\n\n    /**\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} options\n     * @return {void}\n     */\n    value: function setValue(value) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this.value = this._pendingValue = value;\n      this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as setValue at this level.\n     * It exists for symmetry with patchValue on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     * @param {any} value\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} options\n     * @return {void}\n     */\n\n  }, {\n    key: \"patchValue\",\n    value: function patchValue(value) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this.setValue(value, options);\n    }\n\n    /**\n     * @param {{onlySelf: Boolean, emitEvent: Boolean}} options\n     * @return {void}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var formState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._applyFormState(formState);\n      this.markAsPristine(options);\n      this.markAsUntouched(options);\n      this.setValue(this.value, options);\n      this._pendingChange = false;\n    }\n    /**\n     * @param {Function} condition\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"_anyControls\",\n    value: function _anyControls(condition) {\n      return false;\n    }\n    /**\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"_allControlsDisabled\",\n    value: function _allControlsDisabled() {\n      return this.disabled;\n    }\n    /**\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"_isBoxedValue\",\n    value: function _isBoxedValue(formState) {\n      return (typeof formState === \"undefined\" ? \"undefined\" : _typeof(formState)) === \"object\" && formState !== null && Object.keys(formState).length === 2 && \"value\" in formState && \"disabled\" in formState;\n    }\n  }, {\n    key: \"_applyFormState\",\n    value: function _applyFormState(formState) {\n      if (this._isBoxedValue(formState)) {\n        this.value = this._pendingValue = formState.value;\n        if (formState.disabled) {\n          this.disable({\n            onlySelf: true,\n            emitEvent: false\n          });\n        } else {\n          this.enable({\n            onlySelf: true,\n            emitEvent: false\n          });\n        }\n      } else {\n        this.value = this._pendingValue = formState;\n      }\n    }\n  }, {\n    key: \"_syncPendingControls\",\n    value: function _syncPendingControls() {\n      if (this.updateOn === \"submit\") {\n        if (this._pendingDirty) this.markAsDirty();\n        if (this._pendingTouched) this.markAsTouched();\n        if (this._pendingChange) {\n          this.setValue(this._pendingValue);\n          this._pendingChange = false;\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"inactive\",\n    get: function get$$1() {\n      return !this.active;\n    }\n  }]);\n  return FormControl;\n}(AbstractControl);\nvar FormGroup = function (_AbstractControl2) {\n  inherits(FormGroup, _AbstractControl2);\n\n  function FormGroup(controls, validatorOrOpts, asyncValidator) {\n    classCallCheck(this, FormGroup);\n\n    var _this3 = possibleConstructorReturn(this, (FormGroup.__proto__ || Object.getPrototypeOf(FormGroup)).call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)));\n\n    _this3.controls = controls;\n    _this3.validatorOrOpts = validatorOrOpts;\n    _this3._initObservables();\n    _this3._setUpdateStrategy(validatorOrOpts);\n    _this3._setUpControls();\n    _this3.updateValueAndValidity({\n      onlySelf: true,\n      emitEvent: false\n    });\n    _this3.handleSubmit = function (e) {\n      if (e) {\n        e.preventDefault();\n      }\n      if (_this3._anyControlsUnsubmitted()) {\n        _this3.markAsSubmitted({\n          emitEvent: false\n        });\n      }\n      if (!_this3._syncPendingControls()) {\n        _this3.updateValueAndValidity();\n      }\n    };\n    return _this3;\n  }\n  /**\n   * Check whether there is an enabled control with the given name in the group.\n   *\n   * It will return false for disabled controls. If you'd like to check for existence in the group\n   * only, use `AbstractControl` get instead.\n   * @param {String} controlName\n   * @return {Boolean}\n   */\n\n\n  createClass(FormGroup, [{\n    key: \"contains\",\n    value: function contains(controlName) {\n      return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    }\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control, so for most cases you'll want\n     * to use addControl instead.\n     * @param {String} name\n     * @param {AbstractControl} control\n     * @return {AbstractControl}\n     */\n\n  }, {\n    key: \"registerControl\",\n    value: function registerControl(name, control) {\n      if (this.controls[name]) return this.controls[name];\n      this.controls[name] = control;\n      control.setParent(this);\n      control._registerOnCollectionChange(this._onCollectionChange);\n      return control;\n    }\n\n    /**\n     * Add a control to this group.\n     * @param {String} name\n     * @param {AbstractControl} control\n     * @return {void}\n     */\n\n  }, {\n    key: \"addControl\",\n    value: function addControl(name, control) {\n      this.registerControl(name, control);\n      this.updateValueAndValidity();\n      this._onCollectionChange();\n    }\n\n    /**\n     * Remove a control from this group.\n     * @param {String} name\n     * @return {void}\n     */\n\n  }, {\n    key: \"removeControl\",\n    value: function removeControl(name) {\n      if (this.controls[name]) this.controls[name]._registerOnCollectionChange(function () {});\n      delete this.controls[name];\n      this.updateValueAndValidity();\n      this._onCollectionChange();\n    }\n\n    /**\n     * Replace an existing control.\n     * @param {String} name\n     * @param {AbstractControl} control\n     * @return {void}\n     */\n\n  }, {\n    key: \"setControl\",\n    value: function setControl(name, control) {\n      if (this.controls[name]) this.controls[name]._registerOnCollectionChange(function () {});\n      delete this.controls[name];\n      if (control) this.registerControl(name, control);\n      this.updateValueAndValidity();\n      this._onCollectionChange();\n    }\n    /**\n     * Sets the value of the FormGroup. It accepts an object that matches\n     * the structure of the group, with control names as keys.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *  form.setValue({first: 'Jon', last: 'Snow'});\n     *  console.log(form.value);   // {first: 'Jon', last: 'Snow'}\n     * @param {{[key: string]: any}} value\n     * @param {{onlySelf: boolean, emitEvent: boolean}} options\n     * @return {void}\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      var _this4 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._checkAllValuesPresent(value);\n      Object.keys(value).forEach(function (name) {\n        _this4._throwIfControlMissing(name);\n        _this4.controls[name].setValue(value[name], {\n          onlySelf: true,\n          emitEvent: options.emitEvent\n        });\n      });\n      this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormGroup`.\n     * @param {any} value\n     * @param {{onlySelf: boolean, emitEvent: boolean}} options\n     * @return {void}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._forEachChild(function (control, name) {\n        control.reset(value[name], {\n          onlySelf: true,\n          emitEvent: options.emitEvent\n        });\n      });\n      this.updateValueAndValidity(options);\n      this.markAsUnsubmitted();\n      this._updatePristine(options);\n      this._updateTouched(options);\n    }\n    /**\n     *  Patches the value of the FormGroup. It accepts an object with control\n     *  names as keys, and will do its best to match the values to the correct controls\n     *  in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     *  ### Example\n     *  ```\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.patchValue({first: 'Jon'});\n     *  console.log(form.value);   // {first: 'Jon', last: null}\n     *\n     *  ```\n     * @param {{[key: string]: any}} value\n     * @param {{onlySelf: boolean, emitEvent: boolean}} options\n     * @return {void}\n     */\n\n  }, {\n    key: \"patchValue\",\n    value: function patchValue(value) {\n      var _this5 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      Object.keys(value).forEach(function (name) {\n        if (_this5.controls[name]) {\n          _this5.controls[name].patchValue(value[name], {\n            onlySelf: true,\n            emitEvent: options.emitEvent\n          });\n        }\n      });\n      this.updateValueAndValidity(options);\n    }\n    /**\n     * The aggregate value of the FormGroup, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the group.\n     */\n\n  }, {\n    key: \"getRawValue\",\n    value: function getRawValue() {\n      return this._reduceChildren({}, function (acc, control, name) {\n        acc[name] = control instanceof FormControl ? control.value : control.getRawValue();\n        return acc;\n      });\n    }\n    /**\n     * @param {{(v: any, k: String) => void}} callback\n     * @return {void}\n     */\n\n  }, {\n    key: \"_forEachChild\",\n    value: function _forEachChild(callback) {\n      var _this6 = this;\n\n      Object.keys(this.controls).forEach(function (k) {\n        return callback(_this6.controls[k], k);\n      });\n    }\n  }, {\n    key: \"_onCollectionChange\",\n    value: function _onCollectionChange() {}\n    /**\n     * @param {Function} condition\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"_anyControls\",\n    value: function _anyControls(condition) {\n      var _this7 = this;\n\n      var res = false;\n      this._forEachChild(function (control, name) {\n        res = res || _this7.contains(name) && condition(control);\n      });\n      return res;\n    }\n  }, {\n    key: \"_updateValue\",\n    value: function _updateValue() {\n      this.value = this._reduceValue();\n    }\n  }, {\n    key: \"_reduceValue\",\n    value: function _reduceValue() {\n      var _this8 = this;\n\n      return this._reduceChildren({}, function (acc, control, name) {\n        if (control.enabled || _this8.disabled) {\n          acc[name] = control.value;\n        }\n        return acc;\n      });\n    }\n  }, {\n    key: \"_reduceErrors\",\n    value: function _reduceErrors() {\n      var _this9 = this;\n\n      return this._reduceChildren({}, function (acc, control, name) {\n        if (control.enabled || _this9.disabled) {\n          acc[name] = control.errors;\n        }\n        return acc;\n      });\n    }\n    /**\n     * @param {Function} fn\n     */\n\n  }, {\n    key: \"_reduceChildren\",\n    value: function _reduceChildren(initValue, fn) {\n      var res = initValue;\n      this._forEachChild(function (control, name) {\n        res = fn(res, control, name);\n      });\n      return res;\n    }\n  }, {\n    key: \"_setUpControls\",\n    value: function _setUpControls() {\n      var _this10 = this;\n\n      this._forEachChild(function (control) {\n        control.setParent(_this10);\n        control._registerOnCollectionChange(_this10._onCollectionChange);\n      });\n    }\n    /**\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"_allControlsDisabled\",\n    value: function _allControlsDisabled() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = Object.keys(this.controls)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var controlName = _step.value;\n\n          if (this.controls[controlName].enabled) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return Object.keys(this.controls).length > 0 || this.disabled;\n    }\n  }, {\n    key: \"_checkAllValuesPresent\",\n    value: function _checkAllValuesPresent(value) {\n      this._forEachChild(function (control, name) {\n        if (value[name] === undefined) {\n          throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n        }\n      });\n    }\n  }, {\n    key: \"_throwIfControlMissing\",\n    value: function _throwIfControlMissing(name) {\n      if (!Object.keys(this.controls).length) {\n        throw new Error(\"\\n        There are no form controls registered with this group yet.\\n      \");\n      }\n      if (!this.controls[name]) {\n        throw new Error(\"Cannot find form control with name: \" + name + \".\");\n      }\n    }\n  }, {\n    key: \"_syncPendingControls\",\n    value: function _syncPendingControls() {\n      var subtreeUpdated = this._reduceChildren(false, function (updated, child) {\n        return child._syncPendingControls() ? true : updated;\n      });\n      if (subtreeUpdated) this.updateValueAndValidity();\n      return subtreeUpdated;\n    }\n  }]);\n  return FormGroup;\n}(AbstractControl);\nvar FormArray = function (_AbstractControl3) {\n  inherits(FormArray, _AbstractControl3);\n\n  function FormArray(controls, validatorOrOpts, asyncValidator) {\n    classCallCheck(this, FormArray);\n\n    var _this11 = possibleConstructorReturn(this, (FormArray.__proto__ || Object.getPrototypeOf(FormArray)).call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)));\n\n    _this11.controls = controls;\n    _this11.validatorOrOpts = validatorOrOpts;\n    _this11._initObservables();\n    _this11._setUpdateStrategy(validatorOrOpts);\n    _this11._setUpControls();\n    _this11.updateValueAndValidity({\n      onlySelf: true,\n      emitEvent: false\n    });\n    _this11.handleSubmit = function (e) {\n      if (e) {\n        e.preventDefault();\n      }\n      if (_this11._anyControlsUnsubmitted()) {\n        _this11.markAsSubmitted({\n          emitEvent: false\n        });\n      }\n      if (!_this11._syncPendingControls()) {\n        _this11.updateValueAndValidity();\n      }\n    };\n    return _this11;\n  }\n  /**\n   * Get the `AbstractControl` at the given `index` in the array.\n   * @param {Number} index\n   * @return {AbstractControl}\n   */\n\n\n  createClass(FormArray, [{\n    key: \"at\",\n    value: function at(index) {\n      return this.controls[index];\n    }\n\n    /**\n     * Insert a new `AbstractControl` at the end of the array.\n     * @param {AbstractControl} control\n     * @return {Void}\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(control) {\n      this.controls.push(control);\n      this._registerControl(control);\n      this.updateValueAndValidity();\n      this._onCollectionChange();\n    }\n\n    /**\n     * Insert a new `AbstractControl` at the given `index` in the array.\n     * @param {Number} index\n     * @param {AbstractControl} control\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(index, control) {\n      this.controls.splice(index, 0, control);\n      this._registerControl(control);\n      this.updateValueAndValidity();\n      this._onCollectionChange();\n    }\n\n    /**\n     * Remove the control at the given `index` in the array.\n     * @param {Number} index\n     */\n\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(index) {\n      if (this.controls[index]) this.controls[index]._registerOnCollectionChange(function () {});\n      this.controls.splice(index, 1);\n      this.updateValueAndValidity();\n      this._onCollectionChange();\n    }\n\n    /**\n     * Replace an existing control.\n     * @param {Number} index\n     * @param {AbstractControl} control\n     */\n\n  }, {\n    key: \"setControl\",\n    value: function setControl(index, control) {\n      if (this.controls[index]) this.controls[index]._registerOnCollectionChange(function () {});\n      this.controls.splice(index, 1);\n\n      if (control) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n      }\n\n      this.updateValueAndValidity();\n      this._onCollectionChange();\n    }\n\n    /**\n     * Length of the control array.\n     * @return {Number}\n     */\n\n  }, {\n    key: \"setValue\",\n\n\n    /**\n     * Sets the value of the `FormArray`. It accepts an array that matches\n     * the structure of the control.\n     * @param {any[]} value\n     * @param {{onlySelf?: boolean, emitEvent?: boolean}} options\n     */\n    value: function setValue(value) {\n      var _this12 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._checkAllValuesPresent(value);\n      value.forEach(function (newValue, index) {\n        _this12._throwIfControlMissing(index);\n        _this12.at(index).setValue(newValue, {\n          onlySelf: true,\n          emitEvent: options.emitEvent\n        });\n      });\n      this.updateValueAndValidity(options);\n    }\n\n    /**\n     *  Patches the value of the `FormArray`. It accepts an array that matches the\n     *  structure of the control, and will do its best to match the values to the correct\n     *  controls in the group.\n     * @param {any[]} value\n     * @param {{onlySelf?: boolean, emitEvent?: boolean}} options\n     */\n\n  }, {\n    key: \"patchValue\",\n    value: function patchValue(value) {\n      var _this13 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      value.forEach(function (newValue, index) {\n        if (_this13.at(index)) {\n          _this13.at(index).patchValue(newValue, {\n            onlySelf: true,\n            emitEvent: options.emitEvent\n          });\n        }\n      });\n      this.updateValueAndValidity(options);\n    }\n\n    /**\n     * Resets the `FormArray`.\n     * @param {any[]} value\n     * @param {{onlySelf?: boolean, emitEvent?: boolean}} options\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._forEachChild(function (control, index) {\n        control.reset(value[index], {\n          onlySelf: true,\n          emitEvent: options.emitEvent\n        });\n      });\n      this.updateValueAndValidity(options);\n      this.markAsUnsubmitted();\n      this._updatePristine(options);\n      this._updateTouched(options);\n    }\n\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the array.\n     * @return {any[]}\n     */\n\n  }, {\n    key: \"getRawValue\",\n    value: function getRawValue() {\n      return this.controls.map(function (control) {\n        return control instanceof FormControl ? control.value : control.getRawValue();\n      });\n    }\n  }, {\n    key: \"_syncPendingControls\",\n    value: function _syncPendingControls() {\n      var subtreeUpdated = this.controls.reduce(function (updated, child) {\n        return child._syncPendingControls() ? true : updated;\n      }, false);\n      if (subtreeUpdated) this.updateValueAndValidity();\n      return subtreeUpdated;\n    }\n  }, {\n    key: \"_throwIfControlMissing\",\n    value: function _throwIfControlMissing(index) {\n      if (!this.controls.length) {\n        throw new Error(\"\\n        There are no form controls registered with this array yet.\\n      \");\n      }\n      if (!this.at(index)) {\n        throw new Error(\"Cannot find form control at index \" + index);\n      }\n    }\n  }, {\n    key: \"_forEachChild\",\n    value: function _forEachChild(cb) {\n      this.controls.forEach(function (control, index) {\n        cb(control, index);\n      });\n    }\n  }, {\n    key: \"_updateValue\",\n    value: function _updateValue() {\n      var _this14 = this;\n\n      this.value = this.controls.filter(function (control) {\n        return control.enabled || _this14.disabled;\n      }).map(function (control) {\n        return control.value;\n      });\n    }\n  }, {\n    key: \"_anyControls\",\n    value: function _anyControls(condition) {\n      return this.controls.some(function (control) {\n        return control.enabled && condition(control);\n      });\n    }\n  }, {\n    key: \"_setUpControls\",\n    value: function _setUpControls() {\n      var _this15 = this;\n\n      this._forEachChild(function (control) {\n        return _this15._registerControl(control);\n      });\n    }\n  }, {\n    key: \"_checkAllValuesPresent\",\n    value: function _checkAllValuesPresent(value) {\n      this._forEachChild(function (control, i) {\n        if (value[i] === undefined) {\n          throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n        }\n      });\n    }\n  }, {\n    key: \"_allControlsDisabled\",\n    value: function _allControlsDisabled() {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.controls[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var control = _step2.value;\n\n          if (control.enabled) return false;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return this.controls.length > 0 || this.disabled;\n    }\n  }, {\n    key: \"_registerControl\",\n    value: function _registerControl(control) {\n      control.setParent(this);\n      control._registerOnCollectionChange(this._onCollectionChange);\n    }\n  }, {\n    key: \"_onCollectionChange\",\n    value: function _onCollectionChange() {}\n  }, {\n    key: \"length\",\n    get: function get$$1() {\n      return this.controls.length;\n    }\n  }]);\n  return FormArray;\n}(AbstractControl);\n\nfunction _createControl(controlConfig) {\n  if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup || controlConfig instanceof FormArray) {\n    return controlConfig;\n  } else if (Array.isArray(controlConfig)) {\n    var value = controlConfig[0];\n    var validator = controlConfig.length > 1 ? controlConfig[1] : null;\n    var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n    var updateOn = controlConfig.length > 3 ? controlConfig[3] : null;\n    return FormBuilder.control(value, validator, asyncValidator, updateOn);\n  }\n  return FormBuilder.control(controlConfig);\n}\nfunction _reduceControls(controlsConfig) {\n  var controls = {};\n  Object.keys(controlsConfig).forEach(function (controlName) {\n    controls[controlName] = _createControl(controlsConfig[controlName]);\n  });\n  return controls;\n}\n\nvar FormBuilder = function () {\n  function FormBuilder() {\n    classCallCheck(this, FormBuilder);\n  }\n\n  createClass(FormBuilder, null, [{\n    key: 'group',\n\n    /**\n     * Construct a new `FormGroup` with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `validators`, `asyncValidators` & `updateOn`.\n     * @param {{[key: string]: any}} controlsConfig\n     * @param {{[key: string]: any}|null} extra\n     * @return {FormGroup}\n     */\n    value: function group(controlsConfig, extra) {\n      var controls = _reduceControls(controlsConfig);\n      var validators = extra != null ? extra.validators : null;\n      var asyncValidators = extra != null ? extra.asyncValidators : null;\n      var updateOn = extra != null ? extra.updateOn : null;\n      return new FormGroup(controls, { validators: validators, asyncValidators: asyncValidators, updateOn: updateOn });\n    }\n    /**\n     * Construct a `FormArray` from the given `controlsConfig` array of\n     * Valid keys for the `extra` parameter map are `validators`, `asyncValidators` & `updateOn`.\n     */\n\n  }, {\n    key: 'array',\n    value: function array(controlsConfig, extra) {\n      var controls = controlsConfig.map(function (c) {\n        return _createControl(c);\n      });\n      var validators = extra != null ? extra.validators : null;\n      var asyncValidators = extra != null ? extra.asyncValidators : null;\n      var updateOn = extra != null ? extra.updateOn : null;\n      return new FormArray(controls, { validators: validators, asyncValidators: asyncValidators, updateOn: updateOn });\n    }\n\n    /**\n     * Construct a new `FormControl` with the given `formState`,`validator`,`asyncValidator`\n     * and `updateOn`\n     * `formState` can either be a standalone value for the form control or an object\n     * that contains both a value and a disabled status.\n     * @param {Object} formState\n     * @param {Function|Function[]|null} validator\n     * @param {Function|Function[]|null} asyncValidator\n     * @param {string} updatOn\n     * @return {FormControl}\n     */\n\n  }, {\n    key: 'control',\n    value: function control(formState, validators, asyncValidators, updateOn) {\n      return new FormControl(formState, { validators: validators, asyncValidators: asyncValidators, updateOn: updateOn });\n    }\n  }]);\n  return FormBuilder;\n}();\n\nvar Field = function (_React$Component) {\n  inherits(Field, _React$Component);\n\n  function Field() {\n    classCallCheck(this, Field);\n    return possibleConstructorReturn(this, (Field.__proto__ || Object.getPrototypeOf(Field)).apply(this, arguments));\n  }\n\n  createClass(Field, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var control = this.props.control;\n      // Add listener\n\n      this.addListener(control);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var control = this.props.control;\n\n      if (control !== prevProps.control) {\n        this.removeListener(control);\n        this.addListener(control);\n      }\n    }\n  }, {\n    key: 'addListener',\n    value: function addListener(control) {\n      var _this2 = this;\n\n      if (control) {\n        control.stateChanges.subscribe(function () {\n          _this2.forceUpdate();\n        });\n      }\n    }\n  }, {\n    key: 'removeListener',\n    value: function removeListener(control) {\n      if (control) {\n        if (control.stateChanges.observers) {\n          control.stateChanges.observers.forEach(function (observer) {\n            control.stateChanges.unsubscribe(observer);\n          });\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var control = this.props.control;\n      // Remove Listener\n\n      this.removeListener(control);\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(props) {\n      if (!props.strict) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: 'getComponent',\n    value: function getComponent() {\n      var _props = this.props,\n          render = _props.render,\n          children = _props.children,\n          control = _props.control;\n\n      warning(control, 'Missing Control.Please make sure that an instance of FormControl, FormGroup or FormArray must be passed as a control prop in the Field component');\n      if (control) {\n        // Render function as child\n        if (isFunction(children)) {\n          return children(control);\n        }\n        // Render function as render prop\n        if (isFunction(render)) {\n          return render(control);\n        }\n        return null;\n      }\n      return null;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return this.getComponent();\n    }\n  }]);\n  return Field;\n}(React.Component);\n\n\nField.defaultProps = {\n  strict: true\n};\n\nField.propTypes = {\n  strict: PropTypes.bool,\n  control: PropTypes.oneOfType([PropTypes.instanceOf(FormControl), PropTypes.instanceOf(FormArray), PropTypes.instanceOf(FormGroup)]).isRequired,\n  render: PropTypes.func\n};\n\nvar getControlFromReference = function getControlFromReference(reference, options, formState) {\n  switch (reference) {\n    case 'FormGroup':\n      return new FormGroup({}, options);\n    case 'FormArray':\n      return new FormArray([], options);\n    case 'FormControl':\n      return new FormControl(formState, options);\n    default:\n      return null;\n  }\n};\nvar configureControl = function configureControl(props, context, reference) {\n  var name = props.name,\n      parent = props.parent,\n      options = props.options,\n      index = props.index,\n      control = props.control,\n      formState = props.formState,\n      meta = props.meta;\n\n  var parentControl = parent || context;\n  var returnControl = null;\n  if (control) {\n    if (reference === 'FormGroup' && control instanceof FormGroup) {\n      returnControl = control;\n    } else if (reference === 'FormArray' && control instanceof FormArray) {\n      returnControl = control;\n    } else if (reference === 'FormControl' && control instanceof FormControl) {\n      returnControl = control;\n    } else {\n      warning(null, 'Control should be an instance of ' + reference + '.');\n    }\n  } else {\n    if (name) {\n      /**\n       * The presence of name prop signifies two things:-\n       * 1. The group control has to be added as a nested control i.e parent should be present.\n       * 2. Parent must be an instance of FormGroup\n       */\n      warning(parentControl, 'Error in ' + name + ' control: Missing parent control.\\n             Please make sure that the component is wrapped in a FieldGroup or\\n             you can explicitly pass a parent control as a parent prop.');\n      warning(parentControl && parentControl instanceof FormGroup, 'Error in ' + name + ' control: A name prop can only be used if the parent is an instance of FormGroup,\\n             You can use the index prop instead of name, if the parent control is an instance of FormArray');\n      if (parentControl && parentControl instanceof FormGroup) {\n        /**\n         * Check the presence of the control, if a control is already present in the parent control\n         * then don't add a new control, return the same.\n         */\n        if (!parentControl.get(name)) {\n          parentControl.addControl(name, getControlFromReference(reference, options, formState));\n        }\n        returnControl = parentControl.get(name);\n      }\n    } else {\n      if (parentControl instanceof FormArray) {\n        /**\n         * If a index prop is defined then insert the control at a particular index otherwise\n         * push the control at the end of FormArray\n         */\n        var insertAtIndex = index !== undefined ? index : parentControl.controls.length;\n        parentControl.insert(insertAtIndex, getControlFromReference(reference, options, formState));\n        returnControl = parentControl.at(insertAtIndex);\n      } else {\n        // Create a new instance and return as control in case of FormArray and FormGroup\n        if (reference === 'FormGroup' || reference === 'FormArray') {\n          returnControl = getControlFromReference(reference, options, formState);\n        }\n      }\n    }\n  }\n  // Add the meta data about the control\n  if (returnControl && meta) {\n    returnControl.meta = meta;\n  }\n  return returnControl;\n};\n\nvar FieldGroup = function FieldGroup(props) {\n  var strict = props.strict,\n      children = props.children,\n      render = props.render;\n\n  var context = useContext(FormControlContext);\n  var control = configureControl(props, context, 'FormGroup');\n  var FieldProps = {\n    control: control,\n    strict: strict,\n    render: render || children || null\n  };\n  return React.createElement(FormControlContext.Provider, {\n    value: control\n  }, React.createElement(Field, FieldProps));\n};\n\nFieldGroup.defaultProps = {\n  strict: true\n};\n\nFieldGroup.propTypes = {\n  strict: PropTypes.bool,\n  render: PropTypes.func,\n  name: PropTypes.string,\n  index: PropTypes.number,\n  control: PropTypes.instanceOf(FormGroup),\n  options: PropTypes.shape({\n    validators: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]),\n    asyncValidators: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]),\n    updateOn: PropTypes.oneOf(['change', 'blur', 'submit'])\n  }),\n  parent: PropTypes.oneOfType([PropTypes.instanceOf(FormArray), PropTypes.instanceOf(FormGroup)]),\n  meta: PropTypes.object\n};\n\nfunction usePrevious(value) {\n  var ref = useRef();\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nvar FieldControl = function FieldControl(props) {\n  var strict = props.strict,\n      children = props.children,\n      render = props.render,\n      name = props.name,\n      parent = props.parent,\n      options = props.options,\n      index = props.index,\n      control = props.control,\n      formState = props.formState,\n      meta = props.meta;\n\n  var context = useContext(FormControlContext);\n\n  var _useState = useState(configureControl(props, context, 'FormControl')),\n      _useState2 = slicedToArray(_useState, 2),\n      formControl = _useState2[0],\n      setControl = _useState2[1];\n\n  var FieldProps = {\n    control: formControl,\n    strict: strict,\n    render: render || children || null\n  };\n  var prevName = usePrevious(name);\n  useEffect(function () {\n    if (name !== prevName) {\n      setControl(configureControl({\n        name: name,\n        parent: parent,\n        options: options,\n        index: index,\n        control: control,\n        formState: formState,\n        meta: meta\n      }, context, 'FormControl'));\n    }\n  }, [name, parent, options, index, control, formState, meta, context]);\n  return React.createElement(Field, FieldProps);\n};\n\nFieldControl.defaultProps = {\n  strict: true\n};\nFieldControl.propTypes = {\n  strict: PropTypes.bool,\n  render: PropTypes.func,\n  name: PropTypes.string,\n  index: PropTypes.number,\n  control: PropTypes.instanceOf(FormControl),\n  formState: PropTypes.oneOfType([PropTypes.shape({\n    value: PropTypes.any,\n    disabled: PropTypes.bool\n  }), PropTypes.any]),\n  options: PropTypes.shape({\n    validators: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]),\n    asyncValidators: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]),\n    updateOn: PropTypes.oneOf(['change', 'blur', 'submit'])\n  }),\n  parent: PropTypes.oneOfType([PropTypes.instanceOf(FormArray), PropTypes.instanceOf(FormGroup)]),\n  meta: PropTypes.object\n};\n\nvar FieldArray = function FieldArray(props) {\n  var strict = props.strict,\n      children = props.children,\n      render = props.render;\n\n  var context = useContext(FormControlContext);\n  var control = configureControl(props, context, 'FormArray');\n  var FieldProps = {\n    control: control,\n    strict: strict,\n    render: render || children || null\n  };\n  return React.createElement(FormControlContext.Provider, {\n    value: control\n  }, React.createElement(Field, FieldProps));\n};\n\nFieldArray.defaultProps = {\n  strict: true\n};\n\nFieldArray.propTypes = {\n  strict: PropTypes.bool,\n  render: PropTypes.func,\n  name: PropTypes.string,\n  index: PropTypes.number,\n  control: PropTypes.instanceOf(FormArray),\n  options: PropTypes.shape({\n    validators: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]),\n    asyncValidators: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]),\n    updateOn: PropTypes.oneOf(['change', 'blur', 'submit'])\n  }),\n  parent: PropTypes.oneOfType([PropTypes.instanceOf(FormArray), PropTypes.instanceOf(FormGroup)]),\n  meta: PropTypes.object\n};\n\nvar FIELD_CONFIG_STRING = '$field_';\n\nvar FormGenerator = function (_React$Component) {\n  inherits(FormGenerator, _React$Component);\n\n  function FormGenerator(props) {\n    classCallCheck(this, FormGenerator);\n\n    // Intiate the form property\n    var _this = possibleConstructorReturn(this, (FormGenerator.__proto__ || Object.getPrototypeOf(FormGenerator)).call(this, props));\n\n    _this.form = null;\n    return _this;\n  }\n\n  createClass(FormGenerator, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.props.onMount(this.form);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.props.onMount(this.form);\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps) {\n      // Only Re-renders for changes in field config\n      if (nextProps.fieldConfig !== this.props.fieldConfig) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var onUnmount = this.props.onUnmount;\n\n      onUnmount();\n    }\n    // Create the form instance\n\n  }, {\n    key: 'configureForm',\n    value: function configureForm() {\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FormGroup';\n      var fieldConfig = this.props.fieldConfig;\n\n      this.form = configureControl(fieldConfig, {}, type);\n    }\n    // Creates the control from fieldConfig.\n\n  }, {\n    key: 'setControl',\n    value: function setControl(configProps, key) {\n      var _this2 = this;\n\n      var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      // Map the props to be passed in Field\n      var propsToBePassed = mapConfigToFieldProps(configProps);\n      // Set the key\n      propsToBePassed.key = key;\n      if (name) {\n        propsToBePassed.name = name;\n      }\n      // Set the component for $field_\n      if (name && name.startsWith(FIELD_CONFIG_STRING) || typeof configProps.index === 'string' && configProps.index.startsWith(FIELD_CONFIG_STRING)) {\n        // Only subscribe when isStatic is false\n        if (configProps.isStatic === false) {\n          return React.createElement(Field, Object.assign({}, { control: this.form }, propsToBePassed));\n        }\n        return propsToBePassed.render();\n      }\n\n      if (configProps.controls) {\n        if (configProps.controls instanceof Array) {\n          // If controls is an array then configure FormArray\n          if (!this.form) {\n            this.configureForm('FormArray');\n            propsToBePassed.control = this.form;\n          }\n          return React.createElement(FieldArray, Object.assign({}, propsToBePassed, {\n            render: function render() {\n              return configProps.controls.map(function (config, index) {\n                return _this2.setControl(config, key + '_' + index);\n              });\n            }\n          }));\n        } else if (configProps.controls instanceof Object) {\n          // If controls is an object then configure FormGroup\n          if (!this.form) {\n            this.configureForm();\n            propsToBePassed.control = this.form;\n          }\n          return React.createElement(FieldGroup, Object.assign({}, propsToBePassed, {\n            render: function render() {\n              return Object.keys(configProps.controls).map(function (key) {\n                return _this2.setControl(configProps.controls[key], key, key);\n              });\n            }\n          }));\n        } else {\n          warning(false, 'Missing controls in fieldConfig.');\n          return null;\n        }\n      } else {\n        return React.createElement(FieldControl, propsToBePassed);\n      }\n    }\n  }, {\n    key: 'generateFields',\n    value: function generateFields() {\n      // Reset the form instance\n      this.form = null;\n      var fieldConfig = this.props.fieldConfig;\n\n      if (fieldConfig.controls) {\n        var fields = this.setControl(fieldConfig, generateKey('my_form'));\n        return fields;\n      } else {\n        // Throw error\n        warning(false, 'Missing controls in fieldConfig.');\n        return null;\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var fieldConfig = this.props.fieldConfig;\n\n      if (fieldConfig) {\n        return this.generateFields();\n      }\n      return null;\n    }\n  }]);\n  return FormGenerator;\n}(React.Component);\n\n\nFormGenerator.propTypes = {\n  fieldConfig: PropTypes.shape({\n    controls: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n    strict: PropTypes.bool,\n    render: PropTypes.func,\n    name: PropTypes.string,\n    index: PropTypes.number,\n    control: PropTypes.oneOfType([PropTypes.instanceOf(FormArray), PropTypes.instanceOf(FormGroup)]),\n    options: PropTypes.shape({\n      validators: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]),\n      asyncValidators: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]),\n      updateOn: PropTypes.oneOf(['change', 'blur', 'submit'])\n    }),\n    parent: PropTypes.oneOfType([PropTypes.instanceOf(FormArray), PropTypes.instanceOf(FormGroup)]),\n    meta: PropTypes.object\n  }).isRequired,\n  onMount: PropTypes.func,\n  onUnmount: PropTypes.func\n};\nFormGenerator.defaultProps = {\n  onMount: function onMount() {\n    return null;\n  },\n  onUnmount: function onUnmount() {\n    return null;\n  }\n};\n\nexport { FormBuilder, FormGroup, FormControl, FormArray, Validators, Field, FieldGroup, FieldControl, FieldArray, FormGenerator };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}